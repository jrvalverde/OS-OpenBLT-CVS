head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.1
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openblt19990827:1.1.1.1
	openblt082699:1.1.1.1
	openblt082599:1.1.1.1
	openblt082499:1.1.1.1
	openblt082399:1.1.1.1
	openblt082299:1.1.1.1
	openblt082199:1.1.1.1
	openblt082099:1.1.1.1
	openblt081999:1.1.1.1
	openblt081899:1.1.1.1
	openblt081799:1.1.1.1
	openblt081699:1.1.1.1
	openblt081599:1.1.1.1
	openblt071199:1.1.1.1
	openblt071099:1.1.1.1
	openblt070799:1.1.1.1
	openblt070699:1.1.1.1
	openblt070299:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.28.45;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.28.45;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/lib/libc/qsort.c#1 $ */
/* $OpenBSD: qsort.c,v 1.5 1997/06/20 11:19:38 deraadt Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdlib.h>

static __inline char	*med3 (char *, char *, char *, int (*)());
static __inline void	 swapfunc (char *, char *, int, int);

#define min(a, b)	(a) < (b) ? a : b

/*
 * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
 */
#define swapcode(TYPE, parmi, parmj, n) { 		\
	long i = (n) / sizeof (TYPE); 			\
	register TYPE *pi = (TYPE *) (parmi); 		\
	register TYPE *pj = (TYPE *) (parmj); 		\
	do { 						\
		register TYPE	t = *pi;		\
		*pi++ = *pj;				\
		*pj++ = t;				\
        } while (--i > 0);				\
}

#define SWAPINIT(a, es) swaptype = ((char *)a - (char *)0) % sizeof(long) || \
	es % sizeof(long) ? 2 : es == sizeof(long)? 0 : 1;

static __inline void
swapfunc(a, b, n, swaptype)
	char *a, *b;
	int n, swaptype;
{
	if (swaptype <= 1) 
		swapcode(long, a, b, n)
	else
		swapcode(char, a, b, n)
}

#define swap(a, b)					\
	if (swaptype == 0) {				\
		long t = *(long *)(a);			\
		*(long *)(a) = *(long *)(b);		\
		*(long *)(b) = t;			\
	} else						\
		swapfunc(a, b, es, swaptype)

#define vecswap(a, b, n) 	if ((n) > 0) swapfunc(a, b, n, swaptype)

static __inline char *
med3(a, b, c, cmp)
	char *a, *b, *c;
	int (*cmp)();
{
	return cmp(a, b) < 0 ?
	       (cmp(b, c) < 0 ? b : (cmp(a, c) < 0 ? c : a ))
              :(cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c ));
}

void
qsort(aa, n, es, cmp)
	void *aa;
	size_t n, es;
	int (*cmp)();
{
	char *pa, *pb, *pc, *pd, *pl, *pm, *pn;
	int d, r, swaptype, swap_cnt;
	register char *a = aa;

loop:	SWAPINIT(a, es);
	swap_cnt = 0;
	if (n < 7) {
		for (pm = (char *)a + es; pm < (char *) a + n * es; pm += es)
			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0;
			     pl -= es)
				swap(pl, pl - es);
		return;
	}
	pm = (char *)a + (n / 2) * es;
	if (n > 7) {
		pl = (char *)a;
		pn = (char *)a + (n - 1) * es;
		if (n > 40) {
			d = (n / 8) * es;
			pl = med3(pl, pl + d, pl + 2 * d, cmp);
			pm = med3(pm - d, pm, pm + d, cmp);
			pn = med3(pn - 2 * d, pn - d, pn, cmp);
		}
		pm = med3(pl, pm, pn, cmp);
	}
	swap(a, pm);
	pa = pb = (char *)a + es;

	pc = pd = (char *)a + (n - 1) * es;
	for (;;) {
		while (pb <= pc && (r = cmp(pb, a)) <= 0) {
			if (r == 0) {
				swap_cnt = 1;
				swap(pa, pb);
				pa += es;
			}
			pb += es;
		}
		while (pb <= pc && (r = cmp(pc, a)) >= 0) {
			if (r == 0) {
				swap_cnt = 1;
				swap(pc, pd);
				pd -= es;
			}
			pc -= es;
		}
		if (pb > pc)
			break;
		swap(pb, pc);
		swap_cnt = 1;
		pb += es;
		pc -= es;
	}
	if (swap_cnt == 0) {  /* Switch to insertion sort */
		for (pm = (char *) a + es; pm < (char *) a + n * es; pm += es)
			for (pl = pm; pl > (char *) a && cmp(pl - es, pl) > 0; 
			     pl -= es)
				swap(pl, pl - es);
		return;
	}

	pn = (char *)a + n * es;
	r = min(pa - (char *)a, pb - pa);
	vecswap(a, pb - r, r);
	r = min(pd - pc, pn - pd - es);
	vecswap(pb, pn - r, r);
	if ((r = pb - pa) > es)
		qsort(a, r / es, es, cmp);
	if ((r = pd - pc) > es) { 
		/* Iterate rather than recurse to save stack space */
		a = pn - r;
		n = r / es;
		goto loop;
	}
/*		qsort(pn - r, r / es, es, cmp);*/
}
@


1.1.1.1
log
@openblt.070299
@
text
@@
