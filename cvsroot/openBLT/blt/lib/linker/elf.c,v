head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.1
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openblt19990827:1.1.1.1
	openblt082699:1.1.1.1
	openblt082599:1.1.1.1
	openblt082499:1.1.1.1
	openblt082399:1.1.1.1
	openblt082299:1.1.1.1
	openblt082199:1.1.1.1
	openblt082099:1.1.1.1
	openblt081999:1.1.1.1
	openblt081899:1.1.1.1
	openblt081799:1.1.1.1
	openblt081699:1.1.1.1
	openblt081599:1.1.1.1
	openblt071199:1.1.1.1
	openblt071099:1.1.1.1
	openblt070799:1.1.1.1
	openblt070699:1.1.1.1
	openblt070299:1.1.1.1
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.22.59;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.22.59;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/lib/linker/elf.c#2 $
**
** Copyright 1998 Sidney Cammeresi
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
**
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "elf.h"

#if defined (LINUX)
#define NULL ((void *) 0)
#include <stdio.h>
#elif defined (BLT)
#include "blt/types.h"
#endif

#include "defs.h"
#include "file.h"

extern unsigned int num_files;

elf32_sec_hdr_t *_elf_find_section_hdr (elf32_hdr_t *hdr, char *name)
{
	char *section_name;
	int i;
	elf32_sec_hdr_t *sec_hdr;

	sec_hdr = (elf32_sec_hdr_t *) ((unsigned int) hdr + hdr->e_shoff +
		hdr->e_shstrndx * hdr->e_shentsize);
	section_name = (char *) ((unsigned int) hdr + sec_hdr->sh_offset);
	sec_hdr = (elf32_sec_hdr_t *) ((unsigned int) hdr + hdr->e_shoff);
	for (i = 0; i < hdr->e_shnum; i++, sec_hdr = (elf32_sec_hdr_t *)
			((unsigned int) sec_hdr + hdr->e_shentsize))
		if (!strcmp (section_name + sec_hdr->sh_name, name))
			return sec_hdr;
	return NULL;
}

void *_elf_find_section_data (elf32_hdr_t *hdr, char *name)
{
	elf32_sec_hdr_t *sec_hdr;

	sec_hdr = _elf_find_section_hdr (hdr, name);
	return (sec_hdr == NULL) ? NULL : (void *) ((unsigned int) hdr +
		sec_hdr->sh_offset);
}

int _elf_section_offset (elf32_hdr_t *hdr, char *name)
{
	elf32_sec_hdr_t *sec_hdr;

	sec_hdr = _elf_find_section_hdr (hdr, name);
	return (sec_hdr == NULL) ? 0 : sec_hdr->sh_offset;
}

int _elf_section_size (elf32_hdr_t *hdr, char *name)
{
  elf32_sec_hdr_t *sec_hdr;

  sec_hdr = _elf_find_section_hdr (hdr, name);
  return (sec_hdr == NULL) ? 0 : sec_hdr->sh_size;
}

unsigned int _elf_hash (const unsigned char *name)
{
	unsigned int g, h = 0;

	/* spec defined hash function to hash symbols to hash table indices */
	while (*name)
		{
			h = (h << 4) + *name++;
			if (g = h & 0xf0000000)
				h ^= g >> 24;
			h &= ~g;
		}
	return h;
}

void *_elf_lookup_sym (int filenum, const char *name)
{
	char *sym_str;
	unsigned int i, *hash_table, *bucket, num_buckets, *chain, num_chains, index,
		old_index, hash_val;
	elf32_sym_t *symtab;
	file_info *file;

	file = &files[filenum];

	/* look up this file's symbol table and hash table */
	symtab = (elf32_sym_t *) file->symtab_off;
	hash_table = (unsigned int *) file->hash_off;
	sym_str = (char *) file->strtab_off;

#if 0
	/* XXX - this doesn't work */
	/* XXX - it should also be updated following the rewrite */

	/* .hash section is nbucket, nchain, buckets..., chains... */
	num_buckets = *hash_table;
	num_chains = *(hash_table + 1);
	bucket = hash_table + 2;
	chain = hash_table + num_buckets + 2;

	hash_val = _elf_hash (name);
	old_index = index = bucket [hash_val % num_buckets];
	while (strcmp (dyn_str + symtab[index].st_name, name) && index)
		{
			printf (">> %s %x %x\n", sym_str + symtab[index].st_name,
				symtab[index].st_name, index);
			old_index = index;
			index = chain[index];
		}
	printf ("found %s %x\n", sym_str + symtab[old_index].st_name, index);
#else
	/* XXX - at any rate, we do this instead for now */

	/* scan the symbol table sequentially for the one we want */
	for (i = 0; (i * sizeof (elf32_sym_t)) < file->symtab_size; i++)
		if (!strcmp (sym_str + symtab[i].st_name, name) &&
				(symtab[i].st_shndx != SHN_UNDEF))
			{
/*
			if (ELF32_ST_TYPE (symtab[i].st_info) == STT_OBJECT)
				printf ("yahoo\n");
*/
/*
			printf ("found with %x, %x %x %x\n", symtab[i].st_shndx,
				ELF32_ST_BIND (symtab[i].st_info), ELF32_ST_TYPE (symtab[i].st_info),
				0); //ELF32_ST_INFO (symtab[i].st_info));
*/
			return (void *) symtab[i].st_value;
			}
#endif

	return NULL;
}

@


1.1.1.1
log
@openBLT source code
@
text
@@
