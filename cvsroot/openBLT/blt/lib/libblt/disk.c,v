head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.1
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.31.51;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.31.51;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/lib/libblt/disk.c#4 $
**
** Copyright 1999 Sidney Cammeresi
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <stdio.h>
#include <stdlib.h>
#include <blt/disk.h>

static int blt_internal_code (int fdisk, int fstype)
{
	if (fdisk == FDISK_TYPE_FREEBSD)
		if (fstype == BSD_FS_BSDFFS)
			return FREEBSD_FFS;
		else if (fstype == BSD_FS_SWAP)
			return FREEBSD_SWAP;
		else
			return 0;
	else if (fdisk == FDISK_TYPE_OPENBSD)
		if (fstype == BSD_FS_BSDFFS)
			return OPENBSD_FFS;
		else if (fstype == BSD_FS_SWAP)
			return OPENBSD_SWAP;
		else
			return 0;
	else
		return 0;
}

disk_t *disk_alloc (blkdev_t *dev)
{
	unsigned char *mbr, *label;
	int i, j, x;
	disk_t *disk;
	fdisk_partition *fp;
	bsd_disklabel *slice;

	disk = malloc (sizeof (disk_t));
	disk->dev = dev;
	disk->numparts = 0;
	mbr = malloc (dev->blksize);
	label = malloc (dev->blksize);
	slice = (bsd_disklabel *) label;

	/* count fdisk partitions */
	blk_read (dev, mbr, 0, 1);
	for (i = 0; i < 4; i++)
	{
		fp = (fdisk_partition *) (mbr + 0x1be) + i;
		if (fp->type)
		switch (fp->type)
		{
			case FDISK_TYPE_EMPTY:
				break;

			case FDISK_TYPE_FREEBSD:
			case FDISK_TYPE_OPENBSD:
				disk->numparts++;
				blk_read (dev, label, fp->start_sect_num + 1, 1);
				for (j = 0; j < BSD_MAXSLICES; j++)
					if (slice->d_partitions[j].p_fstype != BSD_FS_UNUSED)
						disk->numparts++;
				break;

			default:
				disk->numparts++;
				break;
		}
	}
	disk->partition = malloc (sizeof (partition_t) * disk->numparts);

	/* create partition data, fdisk partitions first */
	for (i = x = 0; i < 4; i++)
	{
		fp = (fdisk_partition *) (mbr + 0x1be) + i;
		if (fp->type)
		{
			disk->partition[x].name[0] = '0' + i;
			disk->partition[x].name[1] = 0;
			disk->partition[x].start = fp->start_sect_num;
			disk->partition[x].size = fp->num_sects;
			disk->partition[x].type = fp->type;
			x++;
		}
	}

	/* create data for bsd slices */
	for (i = 0; i < 4; i++)
	{
		fp = (fdisk_partition *) (mbr + 0x1be) + i;
		switch (fp->type)
		{
			case FDISK_TYPE_FREEBSD:
			case FDISK_TYPE_OPENBSD:
				blk_read (dev, label, fp->start_sect_num + 1, 1);
				for (j = 0; j < BSD_MAXSLICES; j++)
					if (slice->d_partitions[j].p_fstype != BSD_FS_UNUSED)
					{
						disk->partition[x].name[0] = '0' + i;
						disk->partition[x].name[1] = 'a' + j;
						disk->partition[x].name[2] = 0;
						disk->partition[x].start =
							slice->d_partitions[j].p_offset;
						disk->partition[x].size =
							slice->d_partitions[j].p_size;
						disk->partition[x].type = blt_internal_code (fp->type,
							slice->d_partitions[j].p_fstype);
						x++;
					}
				break;
		}
	}

	free (mbr);
	free (label);
	return disk;
}

void disk_free (disk_t *disk)
{
	free (disk->partition);
	free (disk);
}

const char *disk_partition_name (disk_t *disk, int partition)
{
	return disk->partition[partition].name;
}

unsigned long long disk_partition_start (disk_t *disk, int partition)
{
	return disk->partition[partition].start;
}

unsigned long long disk_partition_size (disk_t *disk, int partition)
{
	return disk->partition[partition].size;
}

unsigned int disk_partition_type (disk_t *disk, int partition)
{
	return disk->partition[partition].type;
}

@


1.1.1.1
log
@openblt.19991228
@
text
@@
