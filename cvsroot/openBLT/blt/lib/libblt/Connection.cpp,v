head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.2
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2005.01.20.16.32.09;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.32.09;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.17.11.11;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Copyright 1999, Brian J. Swetland. All rights reserved.
** Distributed under the terms of the OpenBLT License
*/

#include <blt/Connection.h>
#include <blt/Message.h>
#include <blt/namer.h>
#include <blt/syscall.h>

#include <string.h>

using namespace BLT;

Connection::~Connection()
{
	port_destroy(_local_port);
}

int 
Connection::Send(const Message *msg)
{
	msg_hdr_t mh;
	const void *data;
	uint32 len;
	int res;
	
	msg->GetPackedData(&data,&len);

	mh.flags = 0;
	mh.src = _local_port;
	mh.dst = _remote_port;
	mh.data = (void*) data;
	mh.size = len;
	
	res = port_send(&mh);
	if(res != len) {
		return res;
	} else {
		return 0;
	}
}

int 
Connection::Recv(Message *msg)
{
	msg_hdr_t mh;
	int res;
	char buf[1024];
	
	mh.flags = 0;
	mh.dst = _local_port;
	mh.size = 1024;
	mh.data = buf;
	
	if((res = port_recv(&mh)) < 0) return res;
	
	return msg->PutPackedData(buf,res,mh.src);
}

int 
Connection::Call(const Message *send, Message *recv)
{
	int res;
	if((res = Send(send))) {
		return res;
	} else {
		return Recv(recv);
	}
}

Connection *
Connection::FindService(const char *name)
{
	Connection *cnxn;
	int port;
	
	if(!strcmp(name,"namer")){
		port = NAMER_PORT;
	} else {
		port = namer_find(name, 0);
	}
	if(port < 1) return 0;
	
	cnxn = new Connection();
	cnxn->_remote_port = port;
	
	return cnxn;
}

Connection *
Connection::CreateService(const char *name)
{
	Connection *cnxn = new Connection();

	if(!strcmp(name,"namer")){
		port_destroy(cnxn->_local_port);
		cnxn->_local_port = NAMER_PORT;
	} else {
		if(namer_register(cnxn->_local_port, (char*) name)){
			delete cnxn;
			cnxn = 0;
		}
	}
	
	return cnxn;
}


Connection::Connection()
{
	_local_port = port_create(0,"cnxn:local_port");
	_remote_port = 0;
}
@


1.1.1.1
log
@openblt.20000102
@
text
@@


1.1.1.2
log
@openblt.20000517
@
text
@d35 1
a35 1
	res = old_port_send(&mh);
d55 1
a55 1
	if((res = old_port_recv(&mh)) < 0) return res;
@

