head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.1
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2005.01.20.16.31.52;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.31.52;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <win/Canvas.h>
#include <win/Window.h>
#include <win/Event.h>
#include "Connection.h"
#include "../../srv/window/protocol.h"

Canvas::Canvas()
	:	fID(-1),
		fWindow(0),
		fInPaint(false),
		fShowLevel(0)
{
}

Canvas::~Canvas()
{
}

void Canvas::DrawLine(long x1, long y1, long x2, long y2)
{
	if (fWindow == 0)
		return;

	fWindow->fConnection->WriteInt8(OP_DRAW_LINE);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->WriteInt32(x1);
	fWindow->fConnection->WriteInt32(y1);
	fWindow->fConnection->WriteInt32(x2);
	fWindow->fConnection->WriteInt32(y2);
	fWindow->fConnection->EndCommand();
}

void Canvas::FillRect(long x1, long y1, long x2, long y2)
{
	if (fWindow == 0)
		return;

	fWindow->fConnection->WriteInt8(OP_FILL_RECT);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->WriteInt32(x1);
	fWindow->fConnection->WriteInt32(y1);
	fWindow->fConnection->WriteInt32(x2);
	fWindow->fConnection->WriteInt32(y2);
	fWindow->fConnection->EndCommand();
}

void Canvas::SetPenColor(char c)
{
	if (fWindow == 0)
		return;

	fWindow->fConnection->WriteInt8(OP_SET_PEN_COLOR);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->WriteInt8(c);
	fWindow->fConnection->EndCommand();
}

void Canvas::SetBackgroundColor(char c)
{
	if (fWindow == 0)
		return;

	fWindow->fConnection->WriteInt8(OP_SET_BG_COLOR);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->WriteInt8(c);
	fWindow->fConnection->EndCommand();
}

void Canvas::DrawString(long x, long y, const char *str)
{
	if (fWindow == 0)
		return;

	fWindow->fConnection->WriteInt8(OP_DRAW_STRING);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->WriteInt32(x);
	fWindow->fConnection->WriteInt32(y);
	while (*str)
		fWindow->fConnection->WriteInt8(*str++);
		
	fWindow->fConnection->WriteInt8(0);
	fWindow->fConnection->EndCommand();
}

void Canvas::CopyRect(long left, long top, long right, long bottom,
	long newLeft, long newTop)
{
	if (fWindow == 0)
		return;

	fWindow->fConnection->WriteInt8(OP_COPY_RECT);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->WriteInt32(left);
	fWindow->fConnection->WriteInt32(top);
	fWindow->fConnection->WriteInt32(right);
	fWindow->fConnection->WriteInt32(bottom);
	fWindow->fConnection->WriteInt32(newLeft);
	fWindow->fConnection->WriteInt32(newTop);
	fWindow->fConnection->EndCommand();
}


void Canvas::Hide()
{
	if (fWindow == 0)
		return;

	if (--fShowLevel == 0) {
		fWindow->fConnection->WriteInt8(OP_HIDE_WINDOW);
		fWindow->fConnection->WriteInt32(fID);
		fWindow->fConnection->Flush();
	}
}

void Canvas::Show()
{
	if (fWindow == 0)
		return;

	if (++fShowLevel == 1) {
		fWindow->fConnection->WriteInt8(OP_SHOW_WINDOW);
		fWindow->fConnection->WriteInt32(fID);
		fWindow->fConnection->Flush();
	}
}

void Canvas::BeginPaint(long *out_left, long *out_top, long *out_right, long *out_bottom)
{
	if (fInPaint)
		return;
		
	fInPaint = true;
	fWindow->fConnection->WriteInt8(OP_BEGIN_PAINT);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->Flush();
	
	*out_left = fWindow->fConnection->ReadInt32();
	*out_top = fWindow->fConnection->ReadInt32();
	*out_right = fWindow->fConnection->ReadInt32();
	*out_bottom = fWindow->fConnection->ReadInt32();
}

void Canvas::EndPaint()
{
	if (!fInPaint)
		return;
		
	fInPaint = false;
	fWindow->fConnection->WriteInt8(OP_END_PAINT);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->Flush();
}

void Canvas::AddChild(Canvas *child, long left, long top, long right, long bottom)
{
	if (fWindow == 0)
		return;

	fWindow->fConnection->WriteInt8(OP_CREATE_WINDOW);
	fWindow->fConnection->WriteInt32(fID);					// My child
	fWindow->fConnection->WriteInt32(left);
	fWindow->fConnection->WriteInt32(top);
	fWindow->fConnection->WriteInt32(right);
	fWindow->fConnection->WriteInt32(bottom);
	fWindow->fConnection->WriteInt32(fWindow->fEventPort);
	fWindow->fConnection->Flush();
	child->fID = fWindow->fConnection->ReadInt32();
	child->fWindow = fWindow;
	child->fLeft = 0;
	child->fTop = 0;
	child->fRight = right - left;
	child->fBottom = bottom - top;	

	// Stick window in the window's canvas list
	child->fWinListNext = fWindow->fCanvasList;
	child->fWinListPrev = &fWindow->fCanvasList;
	if (fWindow->fCanvasList)
		fWindow->fCanvasList->fWinListPrev = &child->fWinListNext;
		
	fWindow->fCanvasList = child;

	child->Show();
}

void Canvas::RemoveChild(Canvas *child)
{
	fWindow->fConnection->WriteInt8(OP_DESTROY_WINDOW);
	fWindow->fConnection->WriteInt32(child->fID);
	fWindow->fConnection->Flush();
	*child->fWinListPrev = child->fWinListNext;
}

void Canvas::HandleEvent(Event *event)
{
	switch (event->what) {
		case EVT_PAINT: {
			long left, top, right, bottom;
			BeginPaint(&left, &top, &right, &bottom);
			Repaint(left, top, right, bottom);
			EndPaint();
			break;
		}
	
		default:
			EventReceived(event);
	}
}

Window* Canvas::GetWindow() const
{
	return fWindow;
}

void Canvas::GetBounds(long *left, long *top, long *right, long *bottom)
{
	*left = fLeft;
	*top = fTop;
	*right = fRight;
	*bottom = fBottom;
}

void Canvas::Invalidate(long left, long top, long right, long bottom)
{
	fWindow->fConnection->WriteInt8(OP_INVALIDATE);
	fWindow->fConnection->WriteInt32(fID);
	fWindow->fConnection->WriteInt32(left);
	fWindow->fConnection->WriteInt32(top);
	fWindow->fConnection->WriteInt32(right);
	fWindow->fConnection->WriteInt32(bottom);
	fWindow->fConnection->Flush();
}

void Canvas::Repaint(long left, long top, long right, long bottom)
{
}

void Canvas::EventReceived(const Event *)
{
}

void Canvas::LockMouseFocus()
{
	fWindow->fConnection->WriteInt8(OP_LOCK_MOUSE_FOCUS);
	fWindow->fConnection->Flush();
}

@


1.1.1.1
log
@openblt.19991228
@
text
@@
