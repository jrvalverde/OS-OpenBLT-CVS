head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.2
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2005.01.20.16.31.52;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.31.52;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.17.11.11;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <blt/namer.h>
#include <blt/syscall.h>
#include <blt/conio.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "Connection.h"

const int kSendBufferSize = 0x1000;
const int kMaxCommandSize = 270;
const int kReceiveBufferSize = 1024;

Connection::Connection(int sendPort, int receivePort)
	:	fSendPort(sendPort),
		fReceivePort(receivePort),
		fSendBufferSize(0),
		fReceiveBufferSize(0),
		fReceiveBufferPos(0)
{
	fSendBuffer = (char*) malloc(kSendBufferSize);
	fReceiveBuffer = (char*) malloc(kReceiveBufferSize);
}

Connection::~Connection()
{
	free(fSendBuffer);
	free(fReceiveBuffer);
	port_destroy(fReceivePort);
}

void Connection::Write(const void *data, int size)
{
	int sizeWritten = 0;
	while (sizeWritten < size) {
		int sizeToWrite = size - sizeWritten;
		if (fSendBufferSize + sizeToWrite > kSendBufferSize)
			sizeToWrite = kSendBufferSize - fSendBufferSize;
	
		if (sizeToWrite == 0) {
			Flush();
			continue;
		}

		memcpy((void*) (fSendBuffer + fSendBufferSize), (const void*) ((const char*) data
			+ sizeWritten), sizeToWrite);
		fSendBufferSize += sizeToWrite; 
		sizeWritten += sizeToWrite;
	}
}

void Connection::Read(void *data, int size)
{
	int sizeRead = 0;
	while (sizeRead < size) {
		int sizeToRead = size - sizeRead;
		
		if (fReceiveBufferSize - fReceiveBufferPos < sizeToRead)
			sizeToRead = fReceiveBufferSize - fReceiveBufferPos;
	
		if (sizeToRead == 0) {
			Receive();
			continue;
		}

		memcpy((void*) ((char*) data + sizeRead),
			(void*) (fReceiveBuffer + fReceiveBufferPos), sizeToRead);
		fReceiveBufferPos += sizeToRead; 
		sizeRead += sizeToRead;
	}
}

void Connection::EndCommand()
{
	if (fSendBufferSize > kSendBufferSize - kMaxCommandSize)
		Flush();
}

void Connection::Flush()
{
	msg_hdr_t header;
	header.src = fReceivePort;
	header.dst = fSendPort;
	header.data = fSendBuffer;
	header.size = fSendBufferSize;

	port_send(&header);
	
	fSendBufferSize = 0;
}

void Connection::Receive()
{
	msg_hdr_t header;
	header.src = 0;
	header.dst = fReceivePort;
	header.data = fReceiveBuffer;
	header.size = kReceiveBufferSize;

	fReceiveBufferSize = port_recv(&header);
	fReceiveBufferPos = 0;
}

int Connection::ReadInt32()
{
	int outval;
	Read(&outval, 4);
	return outval;
}

short Connection::ReadInt16()
{
	short outval;
	Read(&outval, 2);
	return outval;
}

char Connection::ReadInt8()
{
	char outval;
	Read(&outval, 1);
	return outval;
}

void Connection::WriteInt32(int i)
{
	Write(&i, 4);
}

void Connection::WriteInt16(short s)
{
	Write(&s, 2);
}

void Connection::WriteInt8(char c)
{
	Write(&c, 1);
}

@


1.1.1.1
log
@openblt.19991228
@
text
@@


1.1.1.2
log
@openblt.20000517
@
text
@d86 1
a86 1
	old_port_send(&header);
d99 1
a99 1
	fReceiveBufferSize = old_port_recv(&header);
@

