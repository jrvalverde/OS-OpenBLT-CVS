head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.6
	openblt20000429:1.1.1.6
	openblt20000428:1.1.1.6
	openblt20000427:1.1.1.6
	openblt20000426:1.1.1.6
	openblt20000425:1.1.1.6
	openblt20000424:1.1.1.6
	openblt20000423:1.1.1.6
	openblt20000422:1.1.1.6
	openblt20000421:1.1.1.6
	openblt20000420:1.1.1.6
	openblt20000419:1.1.1.6
	openblt20000418:1.1.1.6
	openblt20000417:1.1.1.6
	openblt20000416:1.1.1.6
	openblt20000415:1.1.1.6
	openblt20000414:1.1.1.6
	openblt20000413:1.1.1.6
	openblt20000412:1.1.1.6
	openblt20000411:1.1.1.6
	openblt20000410:1.1.1.6
	openblt20000409:1.1.1.6
	openblt20000408:1.1.1.6
	openblt20000407:1.1.1.6
	openblt20000406:1.1.1.6
	openblt20000405:1.1.1.6
	openblt20000404:1.1.1.6
	openblt20000403:1.1.1.6
	openblt20000402:1.1.1.6
	openblt20000401:1.1.1.6
	openblt20000331:1.1.1.6
	openblt20000330:1.1.1.6
	openblt20000329:1.1.1.6
	openblt20000328:1.1.1.6
	openblt20000327:1.1.1.6
	openblt20000326:1.1.1.6
	openblt20000325:1.1.1.6
	openblt20000324:1.1.1.6
	openblt20000323:1.1.1.6
	openblt20000322:1.1.1.6
	openblt20000321:1.1.1.6
	openblt20000320:1.1.1.6
	openblt20000319:1.1.1.6
	openblt20000318:1.1.1.6
	openblt20000317:1.1.1.6
	openblt20000316:1.1.1.6
	openblt20000315:1.1.1.6
	openblt20000314:1.1.1.6
	openblt20000313:1.1.1.6
	openblt20000312:1.1.1.6
	openblt20000311:1.1.1.6
	openblt20000310:1.1.1.6
	openblt20000309:1.1.1.6
	openblt20000308:1.1.1.6
	openblt20000307:1.1.1.6
	openblt20000306:1.1.1.6
	openblt20000305:1.1.1.6
	openblt20000304:1.1.1.6
	openblt20000303:1.1.1.6
	openblt20000302:1.1.1.6
	openblt20000301:1.1.1.6
	openblt20000229:1.1.1.6
	openblt20000228:1.1.1.6
	openblt20000227:1.1.1.6
	openblt20000226:1.1.1.6
	openblt20000225:1.1.1.6
	openblt20000224:1.1.1.6
	openblt20000223:1.1.1.6
	openblt20000222:1.1.1.6
	openblt20000221:1.1.1.6
	openblt20000220:1.1.1.6
	openblt20000219:1.1.1.6
	openblt20000218:1.1.1.6
	openblt20000217:1.1.1.6
	openblt20000216:1.1.1.6
	openblt20000215:1.1.1.6
	openblt20000214:1.1.1.6
	openblt20000213:1.1.1.6
	openblt20000212:1.1.1.6
	openblt20000211:1.1.1.6
	openblt20000210:1.1.1.6
	openblt20000209:1.1.1.6
	openblt20000208:1.1.1.6
	openblt20000207:1.1.1.6
	openblt20000206:1.1.1.6
	openblt20000205:1.1.1.6
	openblt20000204:1.1.1.6
	openblt20000203:1.1.1.6
	openblt20000202:1.1.1.6
	openblt20000201:1.1.1.6
	openblt20000131:1.1.1.6
	openblt20000130:1.1.1.6
	openblt20000129:1.1.1.6
	openblt20000128:1.1.1.6
	openblt20000127:1.1.1.6
	openblt20000126:1.1.1.6
	openblt20000125:1.1.1.6
	openblt20000124:1.1.1.6
	openblt20000123:1.1.1.6
	openblt20000122:1.1.1.6
	openblt20000121:1.1.1.6
	openblt20000120:1.1.1.6
	openblt20000119:1.1.1.6
	openblt20000118:1.1.1.6
	openblt20000117:1.1.1.6
	openblt20000116:1.1.1.6
	openblt20000115:1.1.1.6
	openblt20000114:1.1.1.6
	openblt20000113:1.1.1.6
	openblt20000112:1.1.1.6
	openblt20000111:1.1.1.6
	openblt20000110:1.1.1.6
	openblt20000109:1.1.1.6
	openblt20000108:1.1.1.6
	openblt20000107:1.1.1.6
	openblt20000106:1.1.1.5
	openblt20000105:1.1.1.5
	openblt20000104:1.1.1.5
	openblt20000103:1.1.1.5
	openblt20000102:1.1.1.5
	openblt19991228:1.1.1.4
	openblt19990827:1.1.1.3
	openblt082699:1.1.1.3
	openblt082599:1.1.1.3
	openblt082499:1.1.1.3
	openblt082399:1.1.1.3
	openblt082299:1.1.1.3
	openblt082199:1.1.1.3
	openblt082099:1.1.1.3
	openblt081999:1.1.1.3
	openblt081899:1.1.1.3
	openblt081799:1.1.1.3
	openblt081699:1.1.1.3
	openblt081599:1.1.1.3
	openblt071199:1.1.1.3
	openblt071099:1.1.1.2
	openblt070799:1.1.1.2
	openblt070699:1.1.1.1
	openblt070299:1.1.1.1
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.22.59;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.22.59;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.29.12;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.29.31;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.16.31.50;	author jr;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.20.16.32.07;	author jr;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.20.16.33.28;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/lib/crt0.c#8 $
**
** Copyright 1998 Brian J. Swetland
** All rights reserved.
** Copyright 1998-1999 Sidney Cammeresi
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <elf.h>
#include <blt/syscall.h>
#include <blt/libsyms.h>

int main(int argc, char **argv);
void __libc_init_memory(unsigned int top_of_binary,
                        unsigned int start_bss);

extern char __bss_start[];
extern char _end[];

static char *strtab;
static int symtablen;
static elf32_hdr_t *hdr;
static elf32_sym_t *symtab;
static void run_all (const char *name);

void _start(int argc, char **argv)
{
	int res;

	__libc_init_memory((unsigned int) _end, (unsigned int) __bss_start);

	hdr = (elf32_hdr_t *) 0x1000;
	symtab = _elf_find_section_data (hdr, ".symtab");
	strtab = _elf_find_section_data (hdr, ".strtab");
	symtablen = _elf_section_size (hdr, ".symtab") / sizeof (elf32_sym_t);

	run_all ("_init");
	res = main (argc, argv);
	run_all ("_fini");
	os_terminate(res);
}

static void run_all (const char *name)
{
	int i;

	for (i = 0; i < symtablen; i++)
		if (!strcmp (strtab + symtab[i].st_name, name) &&
				(symtab[i].st_shndx != SHN_UNDEF))
			(*((void (*)(void)) symtab[i].st_value)) ();
}

elf32_sec_hdr_t *_elf_find_section_hdr (elf32_hdr_t *hdr, char *name)
{
	char *section_name;
	int i;
	elf32_sec_hdr_t *sec_hdr;

	sec_hdr = (elf32_sec_hdr_t *) ((unsigned int) hdr + hdr->e_shoff +
	    hdr->e_shstrndx * hdr->e_shentsize);
	section_name = (char *) ((unsigned int) hdr + sec_hdr->sh_offset);
	sec_hdr = (elf32_sec_hdr_t *) ((unsigned int) hdr + hdr->e_shoff);
	for (i = 0; i < hdr->e_shnum; i++, sec_hdr = (elf32_sec_hdr_t *)
	        ((unsigned int) sec_hdr + hdr->e_shentsize))
	    if (!strcmp (section_name + sec_hdr->sh_name, name))
	        return sec_hdr;
	return NULL;
}

void *_elf_find_section_data (elf32_hdr_t *hdr, char *name)
{
	elf32_sec_hdr_t *sec_hdr;

	sec_hdr = _elf_find_section_hdr (hdr, name);
	return (sec_hdr == NULL) ? NULL : (void *) ((unsigned int) hdr +
	    sec_hdr->sh_offset);
}

int _elf_section_size (elf32_hdr_t *hdr, char *name)
{
	elf32_sec_hdr_t *sec_hdr;

	sec_hdr = _elf_find_section_hdr (hdr, name);
	return (sec_hdr == NULL) ? 0 : sec_hdr->sh_size;
}

/****** this crap is to make ld happy when we build shared executables ******/

int ___brk_addr;
int __environ;

void abort ()
{
}

void atexit ()
{
}

/********************************* end crap *********************************/

@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.070799
@
text
@d1 1
a1 1
/* $Id: //depot/blt/lib/crt0.c#10 $
d37 1
a37 1
                        unsigned int start_bss, unsigned int bss_length);
d43 1
a43 1
static int symtablen, top;
d51 2
a52 1
	elf32_sec_hdr_t *last;
a57 6
	last = (elf32_sec_hdr_t *) ((unsigned int) hdr + hdr->e_shoff +
		hdr->e_shentsize * (hdr->e_shnum - 1));
	top = (unsigned int) hdr + last->sh_offset + last->sh_size;
	
	__libc_init_memory((unsigned int) top, (unsigned int)
		_elf_find_section_data (hdr, ".bss"), _elf_section_size (hdr, ".bss"));
d61 1
a61 1
	//run_all ("_fini");
@


1.1.1.3
log
@openblt.071199
@
text
@d1 1
a1 1
/* $Id: //depot/blt/lib/crt0.c#12 $
d50 1
d65 3
a67 1
	os_terminate (main (argc, argv));
d119 1
a119 1
void __attribute__ ((noreturn)) abort ()
a120 1
	for (;;) ;
@


1.1.1.4
log
@openblt.19991228
@
text
@d1 1
a1 1
/* $Id: //depot/blt/lib/crt0.c#17 $
a30 1
#include <string.h>
d38 8
a45 10
void __libc_init_fdl (void);
void __libc_init_console (void);
void __libc_init_vfs (void);

char *__progname;

static char *strtab = NULL;
static int symtablen = 0, top = 0;
static elf32_hdr_t *hdr = NULL;
static elf32_sym_t *symtab = NULL;
a63 4
	__progname = *argv;
	__libc_init_fdl ();
	__libc_init_console ();
	__libc_init_vfs ();
@


1.1.1.5
log
@openblt.20000102
@
text
@d1 1
a1 1
/* $Id: //depot/blt/lib/crt0.c#19 $
a34 1
#include <blt/os.h>
d37 5
a41 1
void _init(void);
d45 6
d53 1
a53 9
	_init();
	__progname = *argv;
	os_terminate (main (argc, argv));
}

#define MAXINIT 8

void __libc_init_memory(unsigned int top_of_binary,
                        unsigned int start_bss, unsigned int bss_length);
a54 9
static void _init(void)
{
	char *strtab;
	int symtablen, top, i, j, p;
	elf32_hdr_t *hdr;
	elf32_sym_t *symtab;
	elf32_sec_hdr_t *last;
	init_info *inits[MAXINIT];
	
a62 12
	/* Find any __init_... symbols and build a list of 'em
	** These will all be called before main(), but after
	** the .bss is zero'd
	*/
	for (j = 0, i = 0; i < symtablen; i++){
		if (!strncmp(strtab + symtab[i].st_name, "__init_", 7) &&
			(symtab[i].st_shndx != SHN_UNDEF)){
			inits[j++] = (init_info *) symtab[i].st_value;
			if(j == MAXINIT) break;
		}
	}
	
d66 16
a81 5
	for(p=0;p<5;p++){	
		for(i = 0; i < j; i++){
			if(inits[i]->priority == p) inits[i]->func();
		}
	}
@


1.1.1.6
log
@openblt.20000107
@
text
@d1 1
a1 1
/* $Id: //depot/blt/lib/crt0.c#20 $
d38 1
a38 1
static void _init(void);
@


