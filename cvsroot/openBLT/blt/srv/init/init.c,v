head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.6
	openblt20000429:1.1.1.6
	openblt20000428:1.1.1.6
	openblt20000427:1.1.1.6
	openblt20000426:1.1.1.6
	openblt20000425:1.1.1.6
	openblt20000424:1.1.1.6
	openblt20000423:1.1.1.6
	openblt20000422:1.1.1.6
	openblt20000421:1.1.1.6
	openblt20000420:1.1.1.6
	openblt20000419:1.1.1.6
	openblt20000418:1.1.1.6
	openblt20000417:1.1.1.6
	openblt20000416:1.1.1.6
	openblt20000415:1.1.1.6
	openblt20000414:1.1.1.6
	openblt20000413:1.1.1.6
	openblt20000412:1.1.1.6
	openblt20000411:1.1.1.6
	openblt20000410:1.1.1.6
	openblt20000409:1.1.1.6
	openblt20000408:1.1.1.6
	openblt20000407:1.1.1.6
	openblt20000406:1.1.1.6
	openblt20000405:1.1.1.6
	openblt20000404:1.1.1.6
	openblt20000403:1.1.1.6
	openblt20000402:1.1.1.6
	openblt20000401:1.1.1.6
	openblt20000331:1.1.1.6
	openblt20000330:1.1.1.6
	openblt20000329:1.1.1.6
	openblt20000328:1.1.1.6
	openblt20000327:1.1.1.6
	openblt20000326:1.1.1.6
	openblt20000325:1.1.1.6
	openblt20000324:1.1.1.6
	openblt20000323:1.1.1.6
	openblt20000322:1.1.1.6
	openblt20000321:1.1.1.6
	openblt20000320:1.1.1.6
	openblt20000319:1.1.1.6
	openblt20000318:1.1.1.6
	openblt20000317:1.1.1.6
	openblt20000316:1.1.1.6
	openblt20000315:1.1.1.6
	openblt20000314:1.1.1.6
	openblt20000313:1.1.1.6
	openblt20000312:1.1.1.6
	openblt20000311:1.1.1.6
	openblt20000310:1.1.1.6
	openblt20000309:1.1.1.6
	openblt20000308:1.1.1.6
	openblt20000307:1.1.1.6
	openblt20000306:1.1.1.6
	openblt20000305:1.1.1.6
	openblt20000304:1.1.1.6
	openblt20000303:1.1.1.6
	openblt20000302:1.1.1.6
	openblt20000301:1.1.1.6
	openblt20000229:1.1.1.6
	openblt20000228:1.1.1.6
	openblt20000227:1.1.1.6
	openblt20000226:1.1.1.6
	openblt20000225:1.1.1.6
	openblt20000224:1.1.1.6
	openblt20000223:1.1.1.6
	openblt20000222:1.1.1.6
	openblt20000221:1.1.1.6
	openblt20000220:1.1.1.6
	openblt20000219:1.1.1.6
	openblt20000218:1.1.1.6
	openblt20000217:1.1.1.6
	openblt20000216:1.1.1.6
	openblt20000215:1.1.1.6
	openblt20000214:1.1.1.6
	openblt20000213:1.1.1.6
	openblt20000212:1.1.1.6
	openblt20000211:1.1.1.6
	openblt20000210:1.1.1.6
	openblt20000209:1.1.1.6
	openblt20000208:1.1.1.6
	openblt20000207:1.1.1.6
	openblt20000206:1.1.1.6
	openblt20000205:1.1.1.6
	openblt20000204:1.1.1.6
	openblt20000203:1.1.1.6
	openblt20000202:1.1.1.6
	openblt20000201:1.1.1.6
	openblt20000131:1.1.1.6
	openblt20000130:1.1.1.6
	openblt20000129:1.1.1.6
	openblt20000128:1.1.1.6
	openblt20000127:1.1.1.6
	openblt20000126:1.1.1.6
	openblt20000125:1.1.1.6
	openblt20000124:1.1.1.6
	openblt20000123:1.1.1.6
	openblt20000122:1.1.1.6
	openblt20000121:1.1.1.6
	openblt20000120:1.1.1.6
	openblt20000119:1.1.1.6
	openblt20000118:1.1.1.6
	openblt20000117:1.1.1.6
	openblt20000116:1.1.1.6
	openblt20000115:1.1.1.6
	openblt20000114:1.1.1.6
	openblt20000113:1.1.1.6
	openblt20000112:1.1.1.6
	openblt20000111:1.1.1.6
	openblt20000110:1.1.1.6
	openblt20000109:1.1.1.6
	openblt20000108:1.1.1.6
	openblt20000107:1.1.1.6
	openblt20000106:1.1.1.6
	openblt20000105:1.1.1.6
	openblt20000104:1.1.1.6
	openblt20000103:1.1.1.6
	openblt20000102:1.1.1.6
	openblt19991228:1.1.1.5
	openblt19990827:1.1.1.4
	openblt082699:1.1.1.4
	openblt082599:1.1.1.4
	openblt082499:1.1.1.4
	openblt082399:1.1.1.4
	openblt082299:1.1.1.4
	openblt082199:1.1.1.4
	openblt082099:1.1.1.4
	openblt081999:1.1.1.4
	openblt081899:1.1.1.4
	openblt081799:1.1.1.4
	openblt081699:1.1.1.4
	openblt081599:1.1.1.4
	openblt071199:1.1.1.4
	openblt071099:1.1.1.3
	openblt070799:1.1.1.3
	openblt070699:1.1.1.2
	openblt070299:1.1.1.2
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.23.00;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.00;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.28.56;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.29.14;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.16.29.34;	author jr;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.20.16.31.54;	author jr;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.20.16.32.12;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/srv/init/init.c#3 $
**
** Copyright 1999 Sidney Cammeresi
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * Since nothing is running yet, we divide the system startup into two
 * phases:  starting bootstrap servers and normal initialisation.  The
 * former requires lots of strange incantations to parse the boot image
 * to find rc.boot and run everything it says to; basically we have to
 * reimplement what execve and the vfs do for us.  Once that stuff gets
 * going, we can open rc using the vfs and proceed in a more normal
 * fashion.
 *
 * As rc.boot contains fairly critical stuff, an error from something
 * in there will probably result in a wedged system.
 *
 * Microkernels are fun.
 *
 *         - sc
 */

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <boot.h>
#include <blt/syscall.h>

static char *copyright = "\
OpenBLT Release I (built " __DATE__ ", " __TIME__ ")
    Copyright (c) 1998-1999 The OpenBLT Dev Team.  All rights reserved.
\n";

char **params;
int area;

void run1 (void)
{
	void *ptr;

	thr_spawn (area_clone (area, 0, &ptr, 0), 0x1000, params, NULL);
	os_console ("thr_spawn failed\n");
	os_debug ();
	os_terminate (1);
}

void run2 (void)
{
	__libc_init_console ();
	__libc_init_vfs ();
	execve (params[0], params, NULL);
	printf ("execve failed %d\n", errno);
	os_terminate (1);
}

int boot_get_num (boot_dir *dir, const char *name)
{
	int i;

	for (i = 0; i < BOOTDIR_MAX_ENTRIES; i++)
		if (!strcmp (dir->bd_entry[i].be_name, name))
			return i;
	return -1;
}

char *boot_get_data (boot_dir *dir, int num)
{
	return (char *) dir + dir->bd_entry[num].be_offset * 0x1000;
}

int main (void)
{
	char *c, *rcboot, filenum, *line, *boot_servers;
	int i, j, space, p_argc, boot, fd, thr_id, res, len, total, prog;
	void *ptr;
	boot_dir *dir;

	if (!(boot = area_clone (2, 0, (void **) &dir, 0)))
	{
		os_console ("no uberarea; giving up");
		os_debug ();
		for (;;) ; /* fatal */
	}
	else if ((filenum = boot_get_num (dir, "rc.boot")) < 0)
	{
		os_console ("no /boot/rc.boot; do you know what you're doing?");
		os_debug ();
	}
	else
	{
		line = malloc (256);
		boot_servers = malloc (256);
        *line = *boot_servers = len = total = 0;
		rcboot = boot_get_data (dir, filenum);

        while (total < dir->bd_entry[filenum].be_vsize)
        {
			line[len++] = *rcboot++;
			total++;

            if (line[len - 1] == '\n')
            {   
                line[len-- - 1] = 0;
                for (i = space = 0, p_argc = 2; i < len; i++)
                    if ((line[i] == ' ') && !space)
                        space = 1;
                    else if ((line[i] != ' ') && space)
                    {   
                        p_argc++;
                        space = 0;
                    }
                if ((*line != '#') && *line)
                {
                    params = malloc (sizeof (char *) * p_argc);
                    c = line;
                    for (i = 0; i < p_argc - 1; i++)
                    {
                        for (len = 0; c[len] && (c[len] != ' '); len++) ;
                        params[i] = malloc (len + 1);
                        strlcpy (params[i], c, len + 1);
                        c += len + 1;
                    }
                    params[p_argc] = NULL;
                    if (!strcmp (params[0], "exit"))
                        os_terminate (1);

					prog = boot_get_num (dir, params[0]);
					area = area_create (dir->bd_entry[prog].be_vsize, 0,
						&ptr, 0);
					memcpy (ptr, boot_get_data (dir, prog),
						dir->bd_entry[prog].be_vsize);
					strlcat (boot_servers, " ", 256);
					strlcat (boot_servers, params[0], 256);
                    thr_join (thr_detach (run1), 0);
                }
                len = 0;
            }
        }
	}

	/* say hello */
	__libc_init_console ();
	__libc_init_vfs ();
	printf (copyright);
	printf ("init: bootstrap servers started.  [ %s ]\n", boot_servers + 1);

	/* if we one day pass arguments to init, we will parse them here. */

	/* do some more normal stuff */
	printf ("init: beginning automatic boot.\n\n");
	fd = open ("/boot/rc", O_RDONLY, 0);
	if (fd < 0)
		printf ("error opening /boot/rc\n");
	else
	{
		*line = len = 0;
		while (read (fd, line + len++, 1) > 0)
		{
			if (line[len - 1] == '\n')
			{
				line[len - 1] = 0;
				if ((*line != '#') && *line)
				{
					/* printf ("execing `%s'\n", line); */
					params = malloc (sizeof (char *) * 2);
					params[0] = malloc (strlen (line) + 1);
					strcpy (params[0], line);
					params[1] = NULL;
					thr_join (thr_detach (run2), 0);
				}
				len = 0;
			}
		}
		close (fd);
	}

	printf ("init: nothing left to do\n");
	return 0;
}

@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.070299
@
text
@d1 1
a1 1
/* $Id: //depot/blt/srv/init/init.c#4 $
a184 1
/*
d188 1
a188 1
					// printf ("execing `%s'\n", line);
a195 28
*/
                line[len-- - 1] = 0;
                for (i = space = 0, p_argc = 2; i < len; i++)
                    if ((line[i] == ' ') && !space)
                        space = 1;
                    else if ((line[i] != ' ') && space)
                    {   
                        p_argc++;
                        space = 0;
                    }
                if ((*line != '#') && *line)
                {
                    params = malloc (sizeof (char *) * p_argc);
                    c = line;
                    for (i = 0; i < p_argc - 1; i++)
                    {
                        for (len = 0; c[len] && (c[len] != ' '); len++) ;
                        params[i] = malloc (len + 1);
                        strlcpy (params[i], c, len + 1);
                        c += len + 1;
                    }
                    params[p_argc] = NULL;
                    if (!strcmp (params[0], "exit"))
                        os_terminate (1);

                    thr_join (thr_detach (run2), 0);
                }
                len = 0;
@


1.1.1.3
log
@openblt.070799
@
text
@d1 1
a1 1
/* $Id: //depot/blt/srv/init/init.c#6 $
d102 1
a102 1
	if (!(boot = area_clone (3, 0, (void **) &dir, 0)))
a165 1
	__libc_init_fdl ();
@


1.1.1.4
log
@openblt.071199
@
text
@d1 1
a1 1
/* $Id: //depot/blt/srv/init/init.c#9 $
d58 22
d97 1
a97 2
	int area,sarea;
	char *c, *rcboot, filenum, *line, *boot_servers, **params;
a101 1
	
a155 1
					sarea = area_create (0x1000, 0, &ptr, 0);
d158 1
a158 2
					thr_wait (thr_spawn (0x1074, 0x3ffffd, area, 0x1000,
						sarea, 0x3ff000, params[0]));
d222 2
a223 4
						
					i = execve (params[0], params, NULL);
					if(i>0) thr_wait(i);
					else printf("cannot execute \"%s\"\n",params[0]);
@


1.1.1.5
log
@openblt.19991228
@
text
@d1 1
a1 1
/* $Id: //depot/blt/srv/init/init.c#10 $
a47 1
#include <string.h>
a49 1
#include <unistd.h>
a57 3
void __libc_init_fdl (void), __libc_init_console (void),
	__libc_init_vfs (void);

d75 3
a77 3
	int area, sarea;
	char *c, *rcboot, *line, *boot_servers, **params;
	int i, space, p_argc, boot, fd, len, total, prog, filenum;
a81 3
	line = malloc (256);
	boot_servers = malloc (256);

a86 1
		return 0;
d95 2
@


1.1.1.6
log
@openblt.20000102
@
text
@d1 1
a1 1
/* $Id: //depot/blt/srv/init/init.c#11 $
d134 1
a134 1
                    params[i] = NULL;
d208 1
a208 1
                    params[i] = NULL;
@


