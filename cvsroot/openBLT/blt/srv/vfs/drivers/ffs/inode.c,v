head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.5
	openblt20000429:1.1.1.5
	openblt20000428:1.1.1.5
	openblt20000427:1.1.1.5
	openblt20000426:1.1.1.5
	openblt20000425:1.1.1.5
	openblt20000424:1.1.1.5
	openblt20000423:1.1.1.5
	openblt20000422:1.1.1.5
	openblt20000421:1.1.1.5
	openblt20000420:1.1.1.5
	openblt20000419:1.1.1.5
	openblt20000418:1.1.1.5
	openblt20000417:1.1.1.5
	openblt20000416:1.1.1.5
	openblt20000415:1.1.1.5
	openblt20000414:1.1.1.5
	openblt20000413:1.1.1.5
	openblt20000412:1.1.1.5
	openblt20000411:1.1.1.5
	openblt20000410:1.1.1.5
	openblt20000409:1.1.1.5
	openblt20000408:1.1.1.5
	openblt20000407:1.1.1.5
	openblt20000406:1.1.1.5
	openblt20000405:1.1.1.5
	openblt20000404:1.1.1.5
	openblt20000403:1.1.1.5
	openblt20000402:1.1.1.5
	openblt20000401:1.1.1.5
	openblt20000331:1.1.1.5
	openblt20000330:1.1.1.4
	openblt20000329:1.1.1.3
	openblt20000328:1.1.1.3
	openblt20000327:1.1.1.3
	openblt20000326:1.1.1.3
	openblt20000325:1.1.1.3
	openblt20000324:1.1.1.3
	openblt20000323:1.1.1.3
	openblt20000322:1.1.1.3
	openblt20000321:1.1.1.3
	openblt20000320:1.1.1.3
	openblt20000319:1.1.1.3
	openblt20000318:1.1.1.3
	openblt20000317:1.1.1.3
	openblt20000316:1.1.1.3
	openblt20000315:1.1.1.3
	openblt20000314:1.1.1.3
	openblt20000313:1.1.1.3
	openblt20000312:1.1.1.3
	openblt20000311:1.1.1.3
	openblt20000310:1.1.1.3
	openblt20000309:1.1.1.3
	openblt20000308:1.1.1.3
	openblt20000307:1.1.1.3
	openblt20000306:1.1.1.3
	openblt20000305:1.1.1.3
	openblt20000304:1.1.1.3
	openblt20000303:1.1.1.3
	openblt20000302:1.1.1.3
	openblt20000301:1.1.1.3
	openblt20000229:1.1.1.3
	openblt20000228:1.1.1.3
	openblt20000227:1.1.1.3
	openblt20000226:1.1.1.3
	openblt20000225:1.1.1.3
	openblt20000224:1.1.1.3
	openblt20000223:1.1.1.3
	openblt20000222:1.1.1.3
	openblt20000221:1.1.1.3
	openblt20000220:1.1.1.3
	openblt20000219:1.1.1.3
	openblt20000218:1.1.1.3
	openblt20000217:1.1.1.3
	openblt20000216:1.1.1.3
	openblt20000215:1.1.1.3
	openblt20000214:1.1.1.3
	openblt20000213:1.1.1.3
	openblt20000212:1.1.1.3
	openblt20000211:1.1.1.3
	openblt20000210:1.1.1.3
	openblt20000209:1.1.1.3
	openblt20000208:1.1.1.3
	openblt20000207:1.1.1.3
	openblt20000206:1.1.1.3
	openblt20000205:1.1.1.3
	openblt20000204:1.1.1.3
	openblt20000203:1.1.1.2
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.31.53;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.31.53;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.41.20;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.41.38;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.16.59.39;	author jr;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.20.17.00.02;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/srv/vfs/drivers/ffs/inode.c#2 $
**
** Copyright 1999 Sidney Cammeresi
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "vfs-int.h"

#ifndef VFS_SANDBOX
#include <blt/blkdev.h>
#else
#include "../../sandbox/blkdev.h"
#endif

#include "ffs.h"
#include "ffs-blt.h"
#include "dinode.h"
#include "dir.h"

int ffs_read_vnode (struct vnode *vnode)
{
	char *buf;
	int block, offset;
	struct ffs_super *fs;
	struct ffs_super_data *data;
	struct ffs_dinode *di;

#ifdef FFS_DEBUG
	printf ("ffs_read_vnode %lld\n", vnode->v_vnid);
#endif
	data = vnode->v_sb->sb_data;
	fs = data->sbbuf;
	vnode->v_data = di = malloc (sizeof (struct ffs_dinode));
	buf = malloc (BLKSIZE);
	block = fsbtodb (fs, ino_to_fsba (fs, (int) vnode->v_vnid));
	offset = ino_to_fsbo (fs, (int) vnode->v_vnid);
	blk_read (data->dev, buf, block, BLKSIZE / data->dev->blksize);
	memcpy (di, (struct ffs_dinode *) buf + offset, sizeof (struct ffs_dinode));
	free (buf);
	return 0;
}

void ffs_drop_vnode (struct vnode *vnode)
{
#ifdef FFS_DEBUG
	printf ("ffs_drop_vnode %lld\n", vnode->v_vnid);
#endif
	free (vnode->v_data);
}

static struct vnode *ffs_walk_one (struct vnode *parent, const char *path)
{
	char *buf;
	int i, offset;
	struct ffs_super *fs;
	struct ffs_super_data *data;
	struct ffs_dinode *di;
	struct ffs_direct *direct;

#ifdef FFS_DEBUG
	printf ("ffs_walk_one %s\n", path);
#endif
	data = parent->v_sb->sb_data;
	fs = data->sbbuf;
	di = parent->v_data;
	buf = malloc (BLKSIZE);

	for (i = 0; i < NDADDR; i++)
		if (di->di_db[i])
		{
			blk_read (data->dev, buf, fsbtodb (fs, di->di_db[i]),
				BLKSIZE / data->dev->blksize);
			for (offset = 0; offset < BLKSIZE; offset += direct->d_reclen)
			{
				direct = (struct ffs_direct *) (buf + offset);
				if (!strcmp (direct->d_name, path))
					return vget (parent->v_sb, direct->d_ino);
			}
		}
	printf ("ffs_walk_one: failage 1!\n");

	for (i = 0; i < NIADDR; i++)
		if (di->di_ib[i])
		{
			printf ("ffs_walk_one: indirect %d\n", di->di_ib[i]);
		}

	free (buf);
	printf ("ffs_walk_one: failage 2!\n");
	return NULL;
}

struct vnode *ffs_walk (struct vnode *parent, const char *path)
{
	char *name;
	int i, j, len;
	struct vnode *vn, *vnnext;

#ifdef FFS_DEBUG
	printf ("ffs_walk %s\n", path);
#endif
	vn = parent;
	name = malloc ((len = strlen (path)) + 1);
	strcpy (name, path);

	for (i = 0; i < strlen (path); i = j + 1, vn = vnnext)
	{
		for (j = i; (name[j] != '/') && (j < len); j++) ;
		name[j] = 0;
		vnnext = ffs_walk_one (vn, name + i);
		if (vn != parent)
			vput (vn);
	}
	return vn;
}

@


1.1.1.1
log
@openblt.19991228
@
text
@@


1.1.1.2
log
@openblt.20000203
@
text
@d96 10
a105 4
			blk_read (data->dev, buf, e %lld\n", vnode->v_vnid);
#endif
	free (vnode->v_data);
}
d107 5
a111 16
static struct vnode *ffs_walk_one (struct vnode *parent, const char *path)
{
	char *buf;
	int i, offset;
	struct ffs_super *fs;
	struct ffs_super_data *data;
	struct ffs_dinode *di;
	struct ffs_direct *direct;

#ifdef FFS_DEBUG
	printf ("ffs_walk_one %s\n", path);
#endif
	data = parent->v_sb->sb_data;
	fs = data->sbbuf;
	di = parent->v_data;
	buf = malloc (BLKSIZE);
d113 3
a115 6
	for (i = 0; i < NDADDR; i++)
		if (di->di_db[i])
		{
			blk_read (data->dev, buf, e %lld\n", vnode->v_vnid);
#endif
	free (vnode->v_data);
d118 1
a118 1
static struct vnode *ffs_walk_one (struct vnode *parent, const char *path)
d120 3
a122 6
	char *buf;
	int i, offset;
	struct ffs_super *fs;
	struct ffs_super_data *data;
	struct ffs_dinode *di;
	struct ffs_direct *direct;
d125 1
a125 1
	printf ("ffs_walk_one %s\n", path);
d127 14
a140 4
	data = parent->v_sb->sb_data;
	fs = data->sbbuf;
	di = parent->v_data;
	buf = malloc (BLKSIZE);
a141 2
	for (i = 0; i < NDADDR; i++)
		if (di->di_db[@


1.1.1.3
log
@openblt.20000204
@
text
@d96 21
a116 10
			blk_read (data->dev, buf, fsbtodb (fs, di->di_db[i]),
				BLKSIZE / data->dev->blksize);
			for (offset = 0; offset < BLKSIZE; offset += direct->d_reclen)
			{
				direct = (struct ffs_direct *) (buf + offset);
				if (!strcmp (direct->d_name, path))
					return vget (parent->v_sb, direct->d_ino);
			}
		}
	printf ("ffs_walk_one: failage 1!\n");
d118 2
a119 2
	for (i = 0; i < NIADDR; i++)
		if (di->di_ib[i])
d121 3
a123 6
			printf ("ffs_walk_one: indirect %d\n", di->di_ib[i]);
		}

	free (buf);
	printf ("ffs_walk_one: failage 2!\n");
	return NULL;
d126 1
a126 1
struct vnode *ffs_walk (struct vnode *parent, const char *path)
d128 6
a133 3
	char *name;
	int i, j, len;
	struct vnode *vn, *vnnext;
d136 1
a136 1
	printf ("ffs_walk %s\n", path);
d138 4
a141 14
	vn = parent;
	name = malloc ((len = strlen (path)) + 1);
	strcpy (name, path);

	for (i = 0; i < strlen (path); i = j + 1, vn = vnnext)
	{
		for (j = i; (name[j] != '/') && (j < len); j++) ;
		name[j] = 0;
		vnnext = ffs_walk_one (vn, name + i);
		if (vn != parent)
			vput (vn);
	}
	return vn;
}
d143 2
@


1.1.1.4
log
@openblt.20000330
@
text
@d96 10
a105 4
			blk_read (data->dev, buf, e %lld\n", vnode->v_vnid);
#endif
	free (vnode->v_data);
}
d107 5
a111 16
static struct vnode *ffs_walk_one (struct vnode *parent, const char *path)
{
	char *buf;
	int i, offset;
	struct ffs_super *fs;
	struct ffs_super_data *data;
	struct ffs_dinode *di;
	struct ffs_direct *direct;

#ifdef FFS_DEBUG
	printf ("ffs_walk_one %s\n", path);
#endif
	data = parent->v_sb->sb_data;
	fs = data->sbbuf;
	di = parent->v_data;
	buf = malloc (BLKSIZE);
d113 3
a115 6
	for (i = 0; i < NDADDR; i++)
		if (di->di_db[i])
		{
			blk_read (data->dev, buf, e %lld\n", vnode->v_vnid);
#endif
	free (vnode->v_data);
d118 1
a118 1
static struct vnode *ffs_walk_one (struct vnode *parent, const char *path)
d120 3
a122 6
	char *buf;
	int i, offset;
	struct ffs_super *fs;
	struct ffs_super_data *data;
	struct ffs_dinode *di;
	struct ffs_direct *direct;
d125 1
a125 1
	printf ("ffs_walk_one %s\n", path);
d127 14
a140 4
	data = parent->v_sb->sb_data;
	fs = data->sbbuf;
	di = parent->v_data;
	buf = malloc (BLKSIZE);
a141 2
	for (i = 0; i < NDADDR; i++)
		if (di->di_db[@


1.1.1.5
log
@openblt.20000331
@
text
@d96 21
a116 10
			blk_read (data->dev, buf, fsbtodb (fs, di->di_db[i]),
				BLKSIZE / data->dev->blksize);
			for (offset = 0; offset < BLKSIZE; offset += direct->d_reclen)
			{
				direct = (struct ffs_direct *) (buf + offset);
				if (!strcmp (direct->d_name, path))
					return vget (parent->v_sb, direct->d_ino);
			}
		}
	printf ("ffs_walk_one: failage 1!\n");
d118 2
a119 2
	for (i = 0; i < NIADDR; i++)
		if (di->di_ib[i])
d121 3
a123 6
			printf ("ffs_walk_one: indirect %d\n", di->di_ib[i]);
		}

	free (buf);
	printf ("ffs_walk_one: failage 2!\n");
	return NULL;
d126 1
a126 1
struct vnode *ffs_walk (struct vnode *parent, const char *path)
d128 6
a133 3
	char *name;
	int i, j, len;
	struct vnode *vn, *vnnext;
d136 1
a136 1
	printf ("ffs_walk %s\n", path);
d138 4
a141 14
	vn = parent;
	name = malloc ((len = strlen (path)) + 1);
	strcpy (name, path);

	for (i = 0; i < strlen (path); i = j + 1, vn = vnnext)
	{
		for (j = i; (name[j] != '/') && (j < len); j++) ;
		name[j] = 0;
		vnnext = ffs_walk_one (vn, name + i);
		if (vn != parent)
			vput (vn);
	}
	return vn;
}
d143 2
@


