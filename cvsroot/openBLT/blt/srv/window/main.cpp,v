head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.2
	openblt20000429:1.1.1.2
	openblt20000428:1.1.1.2
	openblt20000427:1.1.1.2
	openblt20000426:1.1.1.2
	openblt20000425:1.1.1.2
	openblt20000424:1.1.1.2
	openblt20000423:1.1.1.2
	openblt20000422:1.1.1.2
	openblt20000421:1.1.1.2
	openblt20000420:1.1.1.2
	openblt20000419:1.1.1.2
	openblt20000418:1.1.1.2
	openblt20000417:1.1.1.2
	openblt20000416:1.1.1.2
	openblt20000415:1.1.1.2
	openblt20000414:1.1.1.2
	openblt20000413:1.1.1.2
	openblt20000412:1.1.1.2
	openblt20000411:1.1.1.2
	openblt20000410:1.1.1.2
	openblt20000409:1.1.1.2
	openblt20000408:1.1.1.2
	openblt20000407:1.1.1.2
	openblt20000406:1.1.1.2
	openblt20000405:1.1.1.2
	openblt20000404:1.1.1.2
	openblt20000403:1.1.1.2
	openblt20000402:1.1.1.2
	openblt20000401:1.1.1.2
	openblt20000331:1.1.1.2
	openblt20000330:1.1.1.2
	openblt20000329:1.1.1.2
	openblt20000328:1.1.1.2
	openblt20000327:1.1.1.2
	openblt20000326:1.1.1.2
	openblt20000325:1.1.1.2
	openblt20000324:1.1.1.2
	openblt20000323:1.1.1.2
	openblt20000322:1.1.1.2
	openblt20000321:1.1.1.2
	openblt20000320:1.1.1.2
	openblt20000319:1.1.1.2
	openblt20000318:1.1.1.2
	openblt20000317:1.1.1.2
	openblt20000316:1.1.1.2
	openblt20000315:1.1.1.2
	openblt20000314:1.1.1.2
	openblt20000313:1.1.1.2
	openblt20000312:1.1.1.2
	openblt20000311:1.1.1.2
	openblt20000310:1.1.1.2
	openblt20000309:1.1.1.2
	openblt20000308:1.1.1.2
	openblt20000307:1.1.1.2
	openblt20000306:1.1.1.2
	openblt20000305:1.1.1.2
	openblt20000304:1.1.1.2
	openblt20000303:1.1.1.2
	openblt20000302:1.1.1.2
	openblt20000301:1.1.1.2
	openblt20000229:1.1.1.2
	openblt20000228:1.1.1.2
	openblt20000227:1.1.1.2
	openblt20000226:1.1.1.2
	openblt20000225:1.1.1.2
	openblt20000224:1.1.1.2
	openblt20000223:1.1.1.2
	openblt20000222:1.1.1.2
	openblt20000221:1.1.1.2
	openblt20000220:1.1.1.2
	openblt20000219:1.1.1.2
	openblt20000218:1.1.1.2
	openblt20000217:1.1.1.2
	openblt20000216:1.1.1.2
	openblt20000215:1.1.1.2
	openblt20000214:1.1.1.2
	openblt20000213:1.1.1.2
	openblt20000212:1.1.1.2
	openblt20000211:1.1.1.2
	openblt20000210:1.1.1.2
	openblt20000209:1.1.1.2
	openblt20000208:1.1.1.2
	openblt20000207:1.1.1.2
	openblt20000206:1.1.1.2
	openblt20000205:1.1.1.2
	openblt20000204:1.1.1.2
	openblt20000203:1.1.1.2
	openblt20000202:1.1.1.2
	openblt20000201:1.1.1.2
	openblt20000131:1.1.1.2
	openblt20000130:1.1.1.2
	openblt20000129:1.1.1.2
	openblt20000128:1.1.1.2
	openblt20000127:1.1.1.2
	openblt20000126:1.1.1.2
	openblt20000125:1.1.1.2
	openblt20000124:1.1.1.2
	openblt20000123:1.1.1.2
	openblt20000122:1.1.1.2
	openblt20000121:1.1.1.2
	openblt20000120:1.1.1.2
	openblt20000119:1.1.1.2
	openblt20000118:1.1.1.2
	openblt20000117:1.1.1.2
	openblt20000116:1.1.1.2
	openblt20000115:1.1.1.2
	openblt20000114:1.1.1.2
	openblt20000113:1.1.1.2
	openblt20000112:1.1.1.2
	openblt20000111:1.1.1.2
	openblt20000110:1.1.1.2
	openblt20000109:1.1.1.2
	openblt20000108:1.1.1.2
	openblt20000107:1.1.1.2
	openblt20000106:1.1.1.2
	openblt20000105:1.1.1.2
	openblt20000104:1.1.1.2
	openblt20000103:1.1.1.2
	openblt20000102:1.1.1.2
	openblt19991228:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2005.01.20.16.31.55;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.31.55;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.32.13;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <blt/namer.h>
#include <blt/syscall.h>
#include <blt/conio.h>
#include <blt/os.h>
#include <blt/qsem.h>
#include <string.h>
#include "Renderer_vga.h"
#include "GraphicsContext.h"
#include "Window.h"
#include "WindowManager.h"
#include "vga.h"


struct ColorMapEntry {
	int red;
	int green;
	int blue;
} colorTable[255] = {
	{0, 0, 0},
	{112, 219, 147},
	{112, 219, 147},
	{50, 204, 153},
	{50, 204, 153},
	{0, 0, 0},
	{0, 0, 0},
	{0, 0, 255},
	{0, 0, 255},
	{95, 159, 159},
	{95, 159, 159},
	{66, 66, 111},
	{66, 66, 111},
	{107, 35, 142},
	{107, 35, 142},
	{191, 216, 216},
	{191, 216, 216},
	{143, 143, 188},
	{143, 143, 188},
	{50, 50, 204},
	{50, 50, 204},
	{127, 0, 255},
	{127, 0, 255},
	{47, 47, 79},
	{47, 47, 79},
	{35, 35, 142},
	{35, 35, 142},
	{35, 35, 142},
	{35, 35, 142},
	{50, 153, 204},
	{50, 153, 204},
	{0, 127, 255},
	{0, 127, 255},
	{35, 107, 142},
	{35, 107, 142},
	{255, 127, 0},
	{255, 127, 0},
	{0, 255, 255},
	{0, 255, 255},
	{142, 35, 35},
	{142, 35, 35},
	{204, 127, 50},
	{204, 127, 50},
	{219, 219, 112},
	{219, 219, 112},
	{234, 234, 173},
	{234, 234, 173},
	{0, 255, 0},
	{0, 255, 0},
	{47, 79, 47},
	{47, 79, 47},
	{79, 79, 47},
	{79, 79, 47},
	{35, 142, 35},
	{35, 142, 35},
	{50, 204, 50},
	{50, 204, 50},
	{107, 142, 35},
	{107, 142, 35},
	{66, 111, 66},
	{66, 111, 66},
	{127, 255, 0},
	{127, 255, 0},
	{143, 188, 143},
	{143, 188, 143},
	{35, 142, 107},
	{35, 142, 107},
	{0, 255, 127},
	{0, 255, 127},
	{153, 204, 50},
	{153, 204, 50},
	{47, 79, 79},
	{47, 79, 79},
	{47, 79, 79},
	{47, 79, 79},
	{84, 84, 84},
	{84, 84, 84},
	{84, 84, 84},
	{84, 84, 84},
	{168, 168, 168},
	{168, 168, 168},
	{168, 168, 168},
	{168, 168, 168},
	{159, 159, 95},
	{159, 159, 95},
	{255, 0, 255},
	{255, 0, 255},
	{142, 35, 107},
	{142, 35, 107},
	{204, 50, 50},
	{204, 50, 50},
	{219, 112, 219},
	{219, 112, 219},
	{153, 50, 204},
	{153, 50, 204},
	{147, 112, 219},
	{147, 112, 219},
	{188, 143, 143},
	{188, 143, 143},
	{234, 173, 234},
	{234, 173, 234},
	{255, 0, 0},
	{255, 0, 0},
	{79, 47, 47},
	{79, 47, 47},
	{219, 112, 147},
	{219, 112, 147},
	{255, 0, 127},
	{255, 0, 127},
	{204, 50, 153},
	{204, 50, 153},
	{111, 66, 66},
	{111, 66, 66},
	{142, 107, 35},
	{142, 107, 35},
	{219, 147, 112},
	{219, 147, 112},
	{216, 191, 216},
	{216, 191, 216},
	{173, 234, 234},
	{173, 234, 234},
	{112, 147, 219},
	{112, 147, 219},
	{112, 219, 219},
	{112, 219, 219},
	{79, 47, 79},
	{79, 47, 79},
	{159, 95, 159},
	{159, 95, 159},
	{216, 216, 191},
	{216, 216, 191},
	{252, 252, 252},
	{252, 252, 252},
	{255, 255, 0},
	{255, 255, 0},
	{147, 219, 112},
	{147, 219, 112},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255},
	{255, 255, 255}		// Transparent color
};


int main()
{
	InitVGA();
	char *vmem = (char*) 0xa0000;
	area_create(64*1024, 0, (void**) &vmem, AREA_PHYSMAP);
	memset((void*) vmem, 0, 320 * 200);
	
	Renderer *screen = new Renderer_vga((char*) vmem, 320, 200, 320);
	for (int i = 0; i < 256; i++)
		SetPalette(i, colorTable[i].red, colorTable[i].green, colorTable[i].blue);

	new WindowManager(screen);
	return 0;
}
@


1.1.1.1
log
@openblt.19991228
@
text
@@


1.1.1.2
log
@openblt.20000102
@
text
@d273 2
@

