head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.9
	openblt20000429:1.1.1.9
	openblt20000428:1.1.1.9
	openblt20000427:1.1.1.9
	openblt20000426:1.1.1.9
	openblt20000425:1.1.1.9
	openblt20000424:1.1.1.9
	openblt20000423:1.1.1.9
	openblt20000422:1.1.1.9
	openblt20000421:1.1.1.9
	openblt20000420:1.1.1.9
	openblt20000419:1.1.1.9
	openblt20000418:1.1.1.9
	openblt20000417:1.1.1.9
	openblt20000416:1.1.1.9
	openblt20000415:1.1.1.9
	openblt20000414:1.1.1.9
	openblt20000413:1.1.1.9
	openblt20000412:1.1.1.9
	openblt20000411:1.1.1.9
	openblt20000410:1.1.1.9
	openblt20000409:1.1.1.9
	openblt20000408:1.1.1.9
	openblt20000407:1.1.1.9
	openblt20000406:1.1.1.9
	openblt20000405:1.1.1.9
	openblt20000404:1.1.1.9
	openblt20000403:1.1.1.9
	openblt20000402:1.1.1.9
	openblt20000401:1.1.1.9
	openblt20000331:1.1.1.9
	openblt20000330:1.1.1.9
	openblt20000329:1.1.1.9
	openblt20000328:1.1.1.9
	openblt20000327:1.1.1.9
	openblt20000326:1.1.1.9
	openblt20000325:1.1.1.9
	openblt20000324:1.1.1.9
	openblt20000323:1.1.1.9
	openblt20000322:1.1.1.9
	openblt20000321:1.1.1.9
	openblt20000320:1.1.1.9
	openblt20000319:1.1.1.9
	openblt20000318:1.1.1.9
	openblt20000317:1.1.1.9
	openblt20000316:1.1.1.9
	openblt20000315:1.1.1.9
	openblt20000314:1.1.1.9
	openblt20000313:1.1.1.9
	openblt20000312:1.1.1.9
	openblt20000311:1.1.1.9
	openblt20000310:1.1.1.9
	openblt20000309:1.1.1.9
	openblt20000308:1.1.1.9
	openblt20000307:1.1.1.9
	openblt20000306:1.1.1.9
	openblt20000305:1.1.1.9
	openblt20000304:1.1.1.9
	openblt20000303:1.1.1.9
	openblt20000302:1.1.1.9
	openblt20000301:1.1.1.9
	openblt20000229:1.1.1.9
	openblt20000228:1.1.1.9
	openblt20000227:1.1.1.9
	openblt20000226:1.1.1.9
	openblt20000225:1.1.1.9
	openblt20000224:1.1.1.9
	openblt20000223:1.1.1.9
	openblt20000222:1.1.1.9
	openblt20000221:1.1.1.9
	openblt20000220:1.1.1.9
	openblt20000219:1.1.1.9
	openblt20000218:1.1.1.9
	openblt20000217:1.1.1.9
	openblt20000216:1.1.1.9
	openblt20000215:1.1.1.9
	openblt20000214:1.1.1.9
	openblt20000213:1.1.1.9
	openblt20000212:1.1.1.9
	openblt20000211:1.1.1.9
	openblt20000210:1.1.1.9
	openblt20000209:1.1.1.9
	openblt20000208:1.1.1.9
	openblt20000207:1.1.1.9
	openblt20000206:1.1.1.9
	openblt20000205:1.1.1.9
	openblt20000204:1.1.1.9
	openblt20000203:1.1.1.9
	openblt20000202:1.1.1.9
	openblt20000201:1.1.1.9
	openblt20000131:1.1.1.9
	openblt20000130:1.1.1.9
	openblt20000129:1.1.1.9
	openblt20000128:1.1.1.9
	openblt20000127:1.1.1.9
	openblt20000126:1.1.1.9
	openblt20000125:1.1.1.9
	openblt20000124:1.1.1.9
	openblt20000123:1.1.1.9
	openblt20000122:1.1.1.9
	openblt20000121:1.1.1.9
	openblt20000120:1.1.1.9
	openblt20000119:1.1.1.9
	openblt20000118:1.1.1.9
	openblt20000117:1.1.1.9
	openblt20000116:1.1.1.8
	openblt20000115:1.1.1.8
	openblt20000114:1.1.1.8
	openblt20000113:1.1.1.8
	openblt20000112:1.1.1.8
	openblt20000111:1.1.1.8
	openblt20000110:1.1.1.8
	openblt20000109:1.1.1.8
	openblt20000108:1.1.1.8
	openblt20000107:1.1.1.8
	openblt20000106:1.1.1.8
	openblt20000105:1.1.1.8
	openblt20000104:1.1.1.8
	openblt20000103:1.1.1.8
	openblt20000102:1.1.1.8
	openblt19991228:1.1.1.7
	openblt19990827:1.1.1.6
	openblt082699:1.1.1.6
	openblt082599:1.1.1.6
	openblt082499:1.1.1.6
	openblt082399:1.1.1.6
	openblt082299:1.1.1.6
	openblt082199:1.1.1.6
	openblt082099:1.1.1.6
	openblt081999:1.1.1.6
	openblt081899:1.1.1.6
	openblt081799:1.1.1.6
	openblt081699:1.1.1.5
	openblt081599:1.1.1.4
	openblt071199:1.1.1.4
	openblt071099:1.1.1.3
	openblt070799:1.1.1.3
	openblt070699:1.1.1.2
	openblt070299:1.1.1.2
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.28.59;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.29.17;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.16.29.37;	author jr;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.20.16.29.51;	author jr;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.20.16.30.01;	author jr;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.20.16.31.58;	author jr;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.20.16.32.18;	author jr;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.20.16.36.34;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/kernel/task.h#6 $
**
** Copyright 1998 Brian J. Swetland
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef _TASK_H_
#define _TASK_H_

#include "resource.h"
 
#define tKERNEL       0
#define tRUNNING      1
#define tREADY        2
#define tDEAD         3
#define tSLEEP_PORT   4
#define tSLEEP_IRQ    5
#define tSLEEP_TIMER  6
#define tSLEEP_SEM    7
#define tSLEEP_THREAD 8

struct __task_t {
    struct __resource_t rsrc;
    char *iomap;
    struct __aspace_t *addr;
    uint32 flags;
    uint32 sleeping_on;
    uint32 irq;
	uint32 esp; /* saved stack */
	uint32 esp0; /* kernel entry stack -- to stuff in the TSS */
	uint32 cr3;
	uint32 scount;
	void *kstack, *ustack;
    resnode_t *resources;
    char name[32];
    int text_area;
#ifdef __SMP__
    int has_cpu, processor, last_processor;
#endif
/*    struct __task_t *parent; ... sameas rsrc.owner */
};

task_t *task_create(aspace_t *a, uint32 ip, uint32 sp, int kernel);
void task_call(task_t *t);
int thr_spawn (int area_id, int addr, char * const *argv, char * const *envp,
    volatile uint32 **stack);

#endif

@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.070299
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/task.h#8 $
d38 1
a38 1
#define tWAITING      4
d41 2
a45 8

	/* wait_queue support */
	struct __resource_t *waiting_on;
	struct __task_t *queue_next;
	struct __task_t *queue_prev;
	uint32 status; /* status code for the task that has just been awakened */
	uint32 wait_time; /* for timer queues */
	
d48 2
a49 1
	uint32 flags;
d57 1
d62 1
a65 3
void task_wait_on(task_t *task, resource_t *rsrc);
uint32 wait_on(resource_t *rsrc);

@


1.1.1.3
log
@openblt.070799
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/task.h#9 $
d49 1
a49 1
	int   status; /* status code for the task that has just been awakened */
d70 1
a70 2
void task_wake(task_t *task, int status);
int wait_on(resource_t *rsrc);
@


1.1.1.4
log
@openblt.071199
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/task.h#11 $
d74 2
a76 6
int thr_kill(int task_id);
int thr_wait(int task_id);
int thr_spawn(uint32 ip, uint32 sp, 
			  uint32 area0, uint32 vaddr0, 
			  uint32 area1, uint32 vaddr1,
			  const char *name);
@


1.1.1.5
log
@openblt.081699
@
text
@d76 6
a81 1
int thr_wait(int tk_call(task_t *t);
a82 5
int thr_kill(int task_id);
int thr_wait(int tk_call(task_t *t);

int thr_kill(int task_id);
int thr_wait(int tk_call(task_t *t)@


1.1.1.6
log
@openblt.081799
@
text
@d76 1
a76 6
int thr_wait(int task_id);
int thr_spawn(uint32 ip, uint32 sp, 
			  uint32 area0, uint32 vaddr0, 
			  uint32 area1, uint32 vaddr1,
			  const char *name);
#endif
d78 5
@


1.1.1.7
log
@openblt.19991228
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/task.h#15 $
d33 1
a33 2
#include "list.h"

a41 7
#define PARANOID 0

#if PARANOID
#define TMAGIC1 0x327610ae
#define TMAGIC2 0x55716621
#endif

d43 1
a43 1
    resource_t rsrc;
a44 4
#if PARANOID
	uint32 magic1;
#endif
		
d46 3
a48 2
	resource_t *waiting_on;
	node_t node;
d52 2
a57 3
#if PARANOID
	uint32 magic2;
#endif
d61 2
a62 2

	area_t *stack_area;
d68 1
a68 12
#if PARANOID
#define TSETMAGIC(t) { t->magic1 = TMAGIC1; t->magic2 = TMAGIC2; }
#define TCLRMAGIC(t) { t->magic1 = 0; t->magic2 = 0; }
#define TCHKMAGIC(t) { if((t->magic1 != TMAGIC1) || (t->magic2 != TMAGIC2)) panic("bad thread magic");}
#else
#define TSETMAGIC(t) ((void)0)
#define TCLRMAGIC(t) ((void)0)
#define TCHKMAGIC(t) ((void)0)
#endif

task_t *task_create(team_t *team, uint32 ip, uint32 sp, int kernel);
void task_destroy(task_t *task);
@


1.1.1.8
log
@openblt.20000102
@
text
@d1 26
a26 2
/* Copyright 1998-1999, Brian J. Swetland. All rights reserved.
** Distributed under the terms of the OpenBLT License
@


1.1.1.9
log
@openblt.20000117
@
text
@a9 1
#include "team.h"
a17 1
#define tSLEEP_PAGING 7
d49 1
a50 2
	team_t *team; /* team to which this task belongs */

@


