head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.5
	openblt20000429:1.1.1.5
	openblt20000428:1.1.1.5
	openblt20000427:1.1.1.5
	openblt20000426:1.1.1.5
	openblt20000425:1.1.1.5
	openblt20000424:1.1.1.5
	openblt20000423:1.1.1.5
	openblt20000422:1.1.1.5
	openblt20000421:1.1.1.5
	openblt20000420:1.1.1.5
	openblt20000419:1.1.1.5
	openblt20000418:1.1.1.5
	openblt20000417:1.1.1.5
	openblt20000416:1.1.1.5
	openblt20000415:1.1.1.5
	openblt20000414:1.1.1.5
	openblt20000413:1.1.1.5
	openblt20000412:1.1.1.5
	openblt20000411:1.1.1.5
	openblt20000410:1.1.1.5
	openblt20000409:1.1.1.5
	openblt20000408:1.1.1.5
	openblt20000407:1.1.1.5
	openblt20000406:1.1.1.5
	openblt20000405:1.1.1.5
	openblt20000404:1.1.1.5
	openblt20000403:1.1.1.5
	openblt20000402:1.1.1.5
	openblt20000401:1.1.1.5
	openblt20000331:1.1.1.5
	openblt20000330:1.1.1.5
	openblt20000329:1.1.1.5
	openblt20000328:1.1.1.5
	openblt20000327:1.1.1.5
	openblt20000326:1.1.1.5
	openblt20000325:1.1.1.5
	openblt20000324:1.1.1.5
	openblt20000323:1.1.1.5
	openblt20000322:1.1.1.5
	openblt20000321:1.1.1.5
	openblt20000320:1.1.1.5
	openblt20000319:1.1.1.5
	openblt20000318:1.1.1.5
	openblt20000317:1.1.1.5
	openblt20000316:1.1.1.5
	openblt20000315:1.1.1.5
	openblt20000314:1.1.1.5
	openblt20000313:1.1.1.5
	openblt20000312:1.1.1.5
	openblt20000311:1.1.1.5
	openblt20000310:1.1.1.5
	openblt20000309:1.1.1.5
	openblt20000308:1.1.1.5
	openblt20000307:1.1.1.5
	openblt20000306:1.1.1.5
	openblt20000305:1.1.1.5
	openblt20000304:1.1.1.5
	openblt20000303:1.1.1.5
	openblt20000302:1.1.1.5
	openblt20000301:1.1.1.5
	openblt20000229:1.1.1.5
	openblt20000228:1.1.1.5
	openblt20000227:1.1.1.5
	openblt20000226:1.1.1.5
	openblt20000225:1.1.1.5
	openblt20000224:1.1.1.5
	openblt20000223:1.1.1.5
	openblt20000222:1.1.1.5
	openblt20000221:1.1.1.5
	openblt20000220:1.1.1.5
	openblt20000219:1.1.1.5
	openblt20000218:1.1.1.5
	openblt20000217:1.1.1.5
	openblt20000216:1.1.1.5
	openblt20000215:1.1.1.5
	openblt20000214:1.1.1.5
	openblt20000213:1.1.1.5
	openblt20000212:1.1.1.5
	openblt20000211:1.1.1.5
	openblt20000210:1.1.1.5
	openblt20000209:1.1.1.5
	openblt20000208:1.1.1.5
	openblt20000207:1.1.1.5
	openblt20000206:1.1.1.5
	openblt20000205:1.1.1.5
	openblt20000204:1.1.1.5
	openblt20000203:1.1.1.5
	openblt20000202:1.1.1.5
	openblt20000201:1.1.1.5
	openblt20000131:1.1.1.5
	openblt20000130:1.1.1.5
	openblt20000129:1.1.1.5
	openblt20000128:1.1.1.5
	openblt20000127:1.1.1.5
	openblt20000126:1.1.1.5
	openblt20000125:1.1.1.5
	openblt20000124:1.1.1.5
	openblt20000123:1.1.1.5
	openblt20000122:1.1.1.5
	openblt20000121:1.1.1.5
	openblt20000120:1.1.1.5
	openblt20000119:1.1.1.5
	openblt20000118:1.1.1.5
	openblt20000117:1.1.1.5
	openblt20000116:1.1.1.5
	openblt20000115:1.1.1.5
	openblt20000114:1.1.1.5
	openblt20000113:1.1.1.5
	openblt20000112:1.1.1.5
	openblt20000111:1.1.1.5
	openblt20000110:1.1.1.5
	openblt20000109:1.1.1.5
	openblt20000108:1.1.1.5
	openblt20000107:1.1.1.5
	openblt20000106:1.1.1.5
	openblt20000105:1.1.1.5
	openblt20000104:1.1.1.5
	openblt20000103:1.1.1.5
	openblt20000102:1.1.1.5
	openblt19991228:1.1.1.4
	openblt19990827:1.1.1.3
	openblt082699:1.1.1.3
	openblt082599:1.1.1.3
	openblt082499:1.1.1.3
	openblt082399:1.1.1.3
	openblt082299:1.1.1.3
	openblt082199:1.1.1.3
	openblt082099:1.1.1.3
	openblt081999:1.1.1.3
	openblt081899:1.1.1.3
	openblt081799:1.1.1.3
	openblt081699:1.1.1.3
	openblt081599:1.1.1.3
	openblt071199:1.1.1.3
	openblt071099:1.1.1.2
	openblt070799:1.1.1.2
	openblt070699:1.1.1.1
	openblt070299:1.1.1.1
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.29.16;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.29.36;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.16.31.57;	author jr;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.20.16.32.16;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/kernel/ktrace.c#8 $
**
** Copyright 1998 Brian J. Swetland
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* serial tracing */

#include <stdarg.h>
#include "memory.h"
#include <i386/io.h>
#include <blt/conio.h>
#include "kernel.h"

#define NULL ((void *) 0)

#define com1 0x3f8 
#define com2 0x2f8

#define combase com1

char *kprintf_lock = 0;

void va_snprintf(char *b, int l, char *fmt, va_list pvar);

#ifdef USE_SERIAL
void krefresh(void)
{
}

unsigned char *screen = NULL;

void kprintf_init(void)
{
	screen = (unsigned char *) kmappages(
#ifdef MONO
										 0xB0, 
#else 
										 0xB8, 
#endif
										 2, 3);

	outb(0, combase + 4);
    outb(0, combase + 0);
    outb(0x83, combase + 3);
    outb(6, combase);                           /* 9600 bps, 8-N-1 */
    outb(0, combase+1);
    outb(0x03, combase + 3);
}

static int ser_getc(void)
{
    while (!(inb(combase + 5) & 0x01));
    return inb(combase);
}

static void ser_putc(int ch)
{
    while (!(inb(combase + 5) & 0x20));
    outb((unsigned char) ch, combase);
}

static void ser_puts(char *s)
{
    int t;
    while(*s){
        ser_putc(*s);
        s++;
    }
}


char *kgetline(char *line, int len)
{
    char c;
    int pos = 0;

    ser_puts(": ");
    
    for(;;){
        switch(c = ser_getc()){
        case 10:
        case 13:
            line[pos]=0;
            ser_puts("\r\n");
            return line;
            
        case 8:
            if(pos) {
                pos--;
                ser_puts("\b \b");
            }
            break;
            
        case 27:
            while(pos) {
                pos--;
                ser_puts("\b \b");
            }
            break;

        default:
            if((c >= ' ') && (c < 0x7f) && (pos < len-1)){
                line[pos] = c;
                pos++;
                ser_putc(c);
            }
        }
    }
}

static char Line[128];
void kprintf(char *fmt, ...)
{
    va_list pvar;    
    va_start(pvar,fmt);
#ifdef __SMP__
	p (&kprintf_lock);
#endif
    va_snprintf(Line,128,fmt,pvar);
    Line[127]=0;
    va_end(pvar);
    ser_puts(Line);
    ser_puts("\r\n");
#ifdef __SMP__
		v (&kprintf_lock);
#endif
}

#else

#define ESC 27
#define BS 8
#define TAB 9
#define CR 13
char ScanTable [] =  {' ', ESC, '1', '2', '3', '4', '5', '6', '7', '8',
                      '9', '0', '-', '=', BS,  TAB, 'q', 'w', 'e', 'r',
                      't', 'y', 'u', 'i', 'o', 'p', '[', ']', CR,  ' ',
                      'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';',
                      '\'', '~', ' ', '\\', 'z', 'x', 'c', 'v', 'b', 'n',
                      'm', ',', '.', '/', ' ', ' ', ' ', ' ', ' '};
char ShiftTable [] = {' ', ESC, '!', '@@', '#', '$', '%', '^', '&', '*',
                      '(', ')', '_', '+', ' ', ' ', 'Q', 'W', 'E', 'R',
                      'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', CR,  ' ',
                      'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':',
                      '\"', '~', ' ', '|', 'Z', 'X', 'C', 'V', 'B', 'N',
                      'M', '<', '>', '?', ' ', ' ', ' ', ' ', ' '};
#define LSHIFT 42
#define RSHIFT 54

unsigned char *screen = NULL;
static unsigned char vscreen[80*25*2];

void *kmappages(int phys, int count, int flags);

void kprintf_init()
{
	screen = (unsigned char *) kmappages(
#ifdef MONO
										 0xB0, 
#else 
										 0xB8, 
#endif
										 2, 3);
	
    con_start((uint32) vscreen);
    con_attr(CON_YELLOW|0x08);
    con_clear();
}

void krefresh(void)
{
	memcpy(screen,vscreen,80*25*2);
}

static char line[80];
void kprintf(char *fmt, ...)
{
    va_list pvar;    
    va_start(pvar,fmt);
#ifdef __SMP__
	p (&kprintf_lock);
#endif
	va_snprintf(line,80,fmt,pvar);
    line[79] = 0;
    va_end(pvar);
    con_goto(0,24);
    con_puts(line);
    con_puts("\n");
	memcpy(screen,vscreen,80*25*2);
#ifdef __SMP__
	v (&kprintf_lock);
#endif
}


void movecursor (int x, int y)
{
    int offset;

    offset = 80 * y + x;
    outb (0xe, 0x3d4);
    outb (offset / 256, 0x3d5);
    outb (0xf, 0x3d4);
    outb (offset % 256, 0x3d5);
}   

char *kgetline(char *line, int len)
{
    int i,lp,key;
    int shift = 0;
    if(len > 80) len = 80;
    
  restart:
    for(i=1;i<len-1;i++) line[i] = ' ';
    line[0] = ':';
    line[1] = ' ';
    line[len-1] = 0;
    lp = 2;
    
    for(;;){
        con_goto(0,24);
        con_puts(line);
		movecursor(lp,24);
		
		memcpy(screen + (80*24*2), vscreen + (80*24*2), 160);
        while(!(inb(0x64) & 0x01));
        key = inb(0x60);
        switch(key){
        case LSHIFT:
        case RSHIFT:
            shift = 1;
            break;
        case LSHIFT | 0x80:
        case RSHIFT | 0x80:
            shift = 0;
            break;
        default:
            if(key & 0x80){
                    /* break */
            } else {
                if(key < 59){
                    key = shift ? ShiftTable[key] : ScanTable[key];

                    switch(key){
                    case CR:
                        line[lp] = 0;
                        kprintf(line);
                        return line + 2;
                    case ESC:                        
                        goto restart;
                    case BS:
                        if(lp > 2){
                            lp--;
                            line[lp]=' ';
                        }
                        break;
                    default:
                        if(lp < len-1);
                        line[lp] = key;
                        lp++;
                    }
                    
                }
            }
        }
    }
}

#endif@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.070799
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/ktrace.c#9 $
d46 1
a46 1
void va_snprintf(char *b, int l, const char *fmt, va_list pvar);
d48 6
a53 4
/* catch bad configurations */
#if defined (SERIAL_DEBUG) && defined (DPRINTF)
#error cannot use both serial debugging and dprintf
#endif
d55 7
a61 2
#if (defined (SERIAL_DEBUG) || defined (DPRINTF)) && !defined (SERIAL)
#error cannot use serial debugging or dprintf without serial port code
d63 1
a64 4
#ifdef SERIAL

void dprintf_init(void)
{
a93 19
#endif

#ifdef SERIAL_DEBUG
void krefresh(void)
{
}

unsigned char *screen = NULL;

void kprintf_init(void)
{
	screen = (unsigned char *) kmappages(
#ifdef MONO
										 0xB0, 
#else 
										 0xB8, 
#endif
										 2, 3);
}
d135 1
a135 1
void kprintf(const char *fmt, ...)
d148 1
a148 1
	v (&kprintf_lock);
d199 1
a199 1
void kprintf(const char *fmt, ...)
a217 20
#ifdef DPRINTF

void dprintf(const char *fmt, ...)
{
    va_list pvar;    
    va_start(pvar,fmt);
#ifdef __SMP__
	p (&kprintf_lock);
#endif
    va_snprintf(line,80,fmt,pvar);
    line[79]=0;
    va_end(pvar);
    ser_puts(line);
    ser_puts("\r\n");
#ifdef __SMP__
	v (&kprintf_lock);
#endif
}

#endif
d292 1
a292 1
#endif
@


1.1.1.3
log
@openblt.071199
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/ktrace.c#10 $
@


1.1.1.4
log
@openblt.19991228
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/ktrace.c#11 $
d53 1
a53 1
#if (defined (SERIAL_DEBUG) || defined (DPRINTF)) && !defined (SERIAL) && !defined (PORT_E9)
a54 29
#endif

#ifdef PORT_E9
/* Bochs has this special direct to console thing */

void dprintf_init(void)
{
}

static int ser_getc(void)
{
	for(;;) ;
}

static void ser_putc(int ch)
{
    while (!(inb(combase + 5) & 0x20));
    outb((unsigned char) ch, 0xe9);
}

static void ser_puts(char *s)
{
    int t;
    while(*s){
        ser_putc(*s);
        s++;
    }
}

@


1.1.1.5
log
@openblt.20000102
@
text
@d1 26
a26 2
/* Copyright 1998-1999, Brian J. Swetland. All rights reserved.
** Distributed under the terms of the OpenBLT License
@


