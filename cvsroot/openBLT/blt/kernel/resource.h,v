head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.5
	openblt20000429:1.1.1.5
	openblt20000428:1.1.1.5
	openblt20000427:1.1.1.5
	openblt20000426:1.1.1.5
	openblt20000425:1.1.1.5
	openblt20000424:1.1.1.5
	openblt20000423:1.1.1.5
	openblt20000422:1.1.1.5
	openblt20000421:1.1.1.5
	openblt20000420:1.1.1.5
	openblt20000419:1.1.1.5
	openblt20000418:1.1.1.5
	openblt20000417:1.1.1.5
	openblt20000416:1.1.1.5
	openblt20000415:1.1.1.5
	openblt20000414:1.1.1.5
	openblt20000413:1.1.1.5
	openblt20000412:1.1.1.5
	openblt20000411:1.1.1.5
	openblt20000410:1.1.1.5
	openblt20000409:1.1.1.5
	openblt20000408:1.1.1.5
	openblt20000407:1.1.1.5
	openblt20000406:1.1.1.5
	openblt20000405:1.1.1.5
	openblt20000404:1.1.1.5
	openblt20000403:1.1.1.5
	openblt20000402:1.1.1.5
	openblt20000401:1.1.1.5
	openblt20000331:1.1.1.5
	openblt20000330:1.1.1.5
	openblt20000329:1.1.1.5
	openblt20000328:1.1.1.5
	openblt20000327:1.1.1.5
	openblt20000326:1.1.1.5
	openblt20000325:1.1.1.5
	openblt20000324:1.1.1.5
	openblt20000323:1.1.1.5
	openblt20000322:1.1.1.5
	openblt20000321:1.1.1.5
	openblt20000320:1.1.1.5
	openblt20000319:1.1.1.5
	openblt20000318:1.1.1.5
	openblt20000317:1.1.1.5
	openblt20000316:1.1.1.5
	openblt20000315:1.1.1.5
	openblt20000314:1.1.1.5
	openblt20000313:1.1.1.5
	openblt20000312:1.1.1.5
	openblt20000311:1.1.1.5
	openblt20000310:1.1.1.5
	openblt20000309:1.1.1.5
	openblt20000308:1.1.1.5
	openblt20000307:1.1.1.5
	openblt20000306:1.1.1.5
	openblt20000305:1.1.1.5
	openblt20000304:1.1.1.5
	openblt20000303:1.1.1.5
	openblt20000302:1.1.1.5
	openblt20000301:1.1.1.5
	openblt20000229:1.1.1.5
	openblt20000228:1.1.1.5
	openblt20000227:1.1.1.5
	openblt20000226:1.1.1.5
	openblt20000225:1.1.1.5
	openblt20000224:1.1.1.5
	openblt20000223:1.1.1.5
	openblt20000222:1.1.1.5
	openblt20000221:1.1.1.5
	openblt20000220:1.1.1.5
	openblt20000219:1.1.1.5
	openblt20000218:1.1.1.5
	openblt20000217:1.1.1.5
	openblt20000216:1.1.1.5
	openblt20000215:1.1.1.5
	openblt20000214:1.1.1.5
	openblt20000213:1.1.1.5
	openblt20000212:1.1.1.5
	openblt20000211:1.1.1.5
	openblt20000210:1.1.1.5
	openblt20000209:1.1.1.5
	openblt20000208:1.1.1.5
	openblt20000207:1.1.1.5
	openblt20000206:1.1.1.5
	openblt20000205:1.1.1.5
	openblt20000204:1.1.1.5
	openblt20000203:1.1.1.5
	openblt20000202:1.1.1.5
	openblt20000201:1.1.1.5
	openblt20000131:1.1.1.5
	openblt20000130:1.1.1.5
	openblt20000129:1.1.1.5
	openblt20000128:1.1.1.5
	openblt20000127:1.1.1.5
	openblt20000126:1.1.1.5
	openblt20000125:1.1.1.5
	openblt20000124:1.1.1.5
	openblt20000123:1.1.1.5
	openblt20000122:1.1.1.5
	openblt20000121:1.1.1.5
	openblt20000120:1.1.1.5
	openblt20000119:1.1.1.5
	openblt20000118:1.1.1.5
	openblt20000117:1.1.1.5
	openblt20000116:1.1.1.4
	openblt20000115:1.1.1.4
	openblt20000114:1.1.1.4
	openblt20000113:1.1.1.4
	openblt20000112:1.1.1.4
	openblt20000111:1.1.1.4
	openblt20000110:1.1.1.4
	openblt20000109:1.1.1.4
	openblt20000108:1.1.1.4
	openblt20000107:1.1.1.4
	openblt20000106:1.1.1.4
	openblt20000105:1.1.1.4
	openblt20000104:1.1.1.4
	openblt20000103:1.1.1.4
	openblt20000102:1.1.1.4
	openblt19991228:1.1.1.3
	openblt19990827:1.1.1.2
	openblt082699:1.1.1.2
	openblt082599:1.1.1.2
	openblt082499:1.1.1.2
	openblt082399:1.1.1.2
	openblt082299:1.1.1.2
	openblt082199:1.1.1.2
	openblt082099:1.1.1.2
	openblt081999:1.1.1.2
	openblt081899:1.1.1.2
	openblt081799:1.1.1.2
	openblt081699:1.1.1.2
	openblt081599:1.1.1.2
	openblt071199:1.1.1.2
	openblt071099:1.1.1.2
	openblt070799:1.1.1.2
	openblt070699:1.1.1.2
	openblt070299:1.1.1.2
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.28.58;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.31.57;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.16.32.17;	author jr;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.20.16.36.33;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/kernel/resource.h#3 $
**
** Copyright 1998 Brian J. Swetland
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef _RESOURCE_H_
#define _RESOURCE_H_

#include "types.h"

typedef enum 
{
    RSRC_NONE, RSRC_TASK, RSRC_ASPACE, RSRC_PORT, RSRC_SEM, RSRC_RIGHT,
    RSRC_AREA
} rsrc_type;

struct __resource_t
{
    uint32 id;
    rsrc_type type;
    struct __task_t *owner;
    struct __rnode_t *rights;
};

/* generic or template dlinklist node */
struct __node_t
{
    struct __node_t *next;
    struct __node_t *prev;
    void *data;
    uint32 _reserved;
};

struct __anode_t
{
    struct __anode_t *next;
    struct __anode_t *prev;
    struct __area_t *area;
    uint32 _reserved;
};

struct __rnode_t
{
    struct __rnode_t *next;
    struct __rnode_t *prev;
    struct __right_t *right;
    uint32 _reserved;
};

struct __tnode_t
{
    struct __tnode_t *next;
    struct __tnode_t *prev;
    struct __task_t *task;
    uint32 _reserved;
};

struct __resnode_t
{
    struct __resnode_t *next;
    struct __resnode_t *prev;
    struct __resource_t *resource;
    uint32 _reserved;
};



/* initialize the resource map */
void rsrc_init(void *map, int size);

/* locate a specifically typed resource */
void *rsrc_find(int type, int id);

/* remove the resource from the table */
void rsrc_release(resource_t *r);

/* assign a portnumber and put it in the resource table */
void rsrc_bind(resource_t *r, rsrc_type type, task_t *owner);

void rsrc_set_owner(resource_t *r, task_t *owner);

/* usercall - return the rsrc_id of the owner of the resource */
int rsrc_identify(uint32 id);

#define rsrc_find_task(id)   ((task_t *) rsrc_find(RSRC_TASK,   id))
#define rsrc_find_port(id)   ((port_t *) rsrc_find(RSRC_PORT,   id))
#define rsrc_find_aspace(id) ((aspace_t *) rsrc_find(RSRC_ASPACE, id))
#define rsrc_find_sem(id)    ((sem_t *) rsrc_find(RSRC_SEM, id))
#define rsrc_find_area(id)   ((area_t *) rsrc_find(RSRC_AREA, id))
#define rsrc_find_right(id)  ((right_t *) rsrc_find(RSRC_RIGHT, id))

#endif
@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.070299
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/resource.h#5 $
d37 1
a37 1
    RSRC_AREA, RSRC_QUEUE, RSRC_MAX
d42 3
a44 3
    uint32 id;               
    rsrc_type type;          
    struct __task_t *owner;  
a45 7
	
	struct __task_t *queue_head;
	struct __task_t *queue_tail;    
	uint32 queue_count;
	uint32 lock; /* unused */
	
	char name[32];
d89 2
a102 2
int queue_create(const char *name);

a103 1
void rsrc_set_name(resource_t *r, const char *name);
a107 5
void rsrc_enqueue(resource_t *rsrc, task_t *task);
void rsrc_enqueue_ordered(resource_t *rsrc, task_t *task, uint32 wake_time);
task_t *rsrc_dequeue(resource_t *rsrc);
const char *rsrc_typename(resource_t *rsrc);

a113 1
#define rsrc_find_queue(id)  ((resource_t *) rsrc_find(RSRC_QUEUE, id));
@


1.1.1.3
log
@openblt.19991228
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/resource.h#7 $
a32 1
#include "list.h"
d37 1
a37 1
    RSRC_AREA, RSRC_QUEUE, RSRC_TEAM, RSRC_MAX
d42 4
a45 3
	uint32 id;    
	rsrc_type type;
	team_t *owner;
d47 4
a50 2
	list_t rights;
	list_t queue;
d55 40
d106 1
a106 1
void rsrc_bind(resource_t *r, rsrc_type type, team_t *owner);
d108 3
a110 1
void rsrc_set_owner(resource_t *r, team_t *owner);
d127 1
a127 4
#define rsrc_find_queue(id)  ((resource_t *) rsrc_find(RSRC_QUEUE, id))
#define rsrc_find_team(id)   ((team_t *) rsrc_find(RSRC_TEAM, id))

int queue_create(const char *name, team_t *team);
@


1.1.1.4
log
@openblt.20000102
@
text
@d1 26
a26 2
/* Copyright 1998-1999, Brian J. Swetland. All rights reserved.
** Distributed under the terms of the OpenBLT License
@


1.1.1.5
log
@openblt.20000117
@
text
@a52 2
task_t *rsrc_queue_peek(resource_t *rsrc);

@


