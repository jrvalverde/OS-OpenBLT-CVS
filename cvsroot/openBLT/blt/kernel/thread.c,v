head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.3
	openblt20000429:1.1.1.3
	openblt20000428:1.1.1.3
	openblt20000427:1.1.1.3
	openblt20000426:1.1.1.3
	openblt20000425:1.1.1.3
	openblt20000424:1.1.1.3
	openblt20000423:1.1.1.3
	openblt20000422:1.1.1.3
	openblt20000421:1.1.1.3
	openblt20000420:1.1.1.3
	openblt20000419:1.1.1.3
	openblt20000418:1.1.1.3
	openblt20000417:1.1.1.3
	openblt20000416:1.1.1.3
	openblt20000415:1.1.1.3
	openblt20000414:1.1.1.3
	openblt20000413:1.1.1.3
	openblt20000412:1.1.1.3
	openblt20000411:1.1.1.3
	openblt20000410:1.1.1.3
	openblt20000409:1.1.1.3
	openblt20000408:1.1.1.3
	openblt20000407:1.1.1.3
	openblt20000406:1.1.1.3
	openblt20000405:1.1.1.3
	openblt20000404:1.1.1.3
	openblt20000403:1.1.1.3
	openblt20000402:1.1.1.3
	openblt20000401:1.1.1.3
	openblt20000331:1.1.1.3
	openblt20000330:1.1.1.3
	openblt20000329:1.1.1.3
	openblt20000328:1.1.1.3
	openblt20000327:1.1.1.3
	openblt20000326:1.1.1.3
	openblt20000325:1.1.1.3
	openblt20000324:1.1.1.3
	openblt20000323:1.1.1.3
	openblt20000322:1.1.1.3
	openblt20000321:1.1.1.3
	openblt20000320:1.1.1.3
	openblt20000319:1.1.1.3
	openblt20000318:1.1.1.3
	openblt20000317:1.1.1.3
	openblt20000316:1.1.1.3
	openblt20000315:1.1.1.3
	openblt20000314:1.1.1.3
	openblt20000313:1.1.1.3
	openblt20000312:1.1.1.3
	openblt20000311:1.1.1.3
	openblt20000310:1.1.1.3
	openblt20000309:1.1.1.3
	openblt20000308:1.1.1.3
	openblt20000307:1.1.1.3
	openblt20000306:1.1.1.3
	openblt20000305:1.1.1.3
	openblt20000304:1.1.1.3
	openblt20000303:1.1.1.3
	openblt20000302:1.1.1.3
	openblt20000301:1.1.1.3
	openblt20000229:1.1.1.3
	openblt20000228:1.1.1.3
	openblt20000227:1.1.1.3
	openblt20000226:1.1.1.3
	openblt20000225:1.1.1.3
	openblt20000224:1.1.1.3
	openblt20000223:1.1.1.3
	openblt20000222:1.1.1.3
	openblt20000221:1.1.1.3
	openblt20000220:1.1.1.3
	openblt20000219:1.1.1.3
	openblt20000218:1.1.1.3
	openblt20000217:1.1.1.3
	openblt20000216:1.1.1.3
	openblt20000215:1.1.1.3
	openblt20000214:1.1.1.3
	openblt20000213:1.1.1.3
	openblt20000212:1.1.1.3
	openblt20000211:1.1.1.3
	openblt20000210:1.1.1.3
	openblt20000209:1.1.1.3
	openblt20000208:1.1.1.3
	openblt20000207:1.1.1.3
	openblt20000206:1.1.1.3
	openblt20000205:1.1.1.3
	openblt20000204:1.1.1.3
	openblt20000203:1.1.1.3
	openblt20000202:1.1.1.3
	openblt20000201:1.1.1.3
	openblt20000131:1.1.1.3
	openblt20000130:1.1.1.3
	openblt20000129:1.1.1.3
	openblt20000128:1.1.1.3
	openblt20000127:1.1.1.3
	openblt20000126:1.1.1.3
	openblt20000125:1.1.1.3
	openblt20000124:1.1.1.3
	openblt20000123:1.1.1.3
	openblt20000122:1.1.1.3
	openblt20000121:1.1.1.3
	openblt20000120:1.1.1.3
	openblt20000119:1.1.1.3
	openblt20000118:1.1.1.3
	openblt20000117:1.1.1.3
	openblt20000116:1.1.1.3
	openblt20000115:1.1.1.3
	openblt20000114:1.1.1.3
	openblt20000113:1.1.1.3
	openblt20000112:1.1.1.3
	openblt20000111:1.1.1.3
	openblt20000110:1.1.1.3
	openblt20000109:1.1.1.3
	openblt20000108:1.1.1.3
	openblt20000107:1.1.1.3
	openblt20000106:1.1.1.3
	openblt20000105:1.1.1.3
	openblt20000104:1.1.1.3
	openblt20000103:1.1.1.3
	openblt20000102:1.1.1.3
	openblt19991228:1.1.1.3
	openblt19990827:1.1.1.3
	openblt082699:1.1.1.3
	openblt082599:1.1.1.3
	openblt082499:1.1.1.3
	openblt082399:1.1.1.3
	openblt082299:1.1.1.3
	openblt082199:1.1.1.3
	openblt082099:1.1.1.3
	openblt081999:1.1.1.3
	openblt081899:1.1.1.3
	openblt081799:1.1.1.3
	openblt081699:1.1.1.3
	openblt081599:1.1.1.3
	openblt071199:1.1.1.3
	openblt071099:1.1.1.3
	openblt070799:1.1.1.3
	openblt070699:1.1.1.2
	openblt070299:1.1.1.2
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.28.59;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.29.17;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/kernel/thread.c#2 $
**
** Copyright 1999 Sidney Cammeresi
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <string.h>
#include <blt/os.h>
#include "aspace.h"
#include "kernel.h"
#include "thread.h"

int thr_detach (unsigned int eip)
{
	int i, clone;
	void *ptr, *phys, *src, *dst;
	aspace_t *a;
	task_t *t;
	area_t *text, *orig_heap;

	a = aspace_create ();
	text = rsrc_find_area (current->text_area);
	ptr = kgetpages2 (text->length, 3, (uint32 *) &phys);
	for (i = 0; i < text->length * 0x1000; i++)
		*((char *) ptr + i) = *((char *) 0x1000 + i);

	t = new_thread (a, eip, 0);
	//t->rsrc.owner = current;
	t->text_area = area_create (a, text->length * 0x1000, 0x1000, &phys,
		0x1010);
	//a->heap_id = area_create (a, 0x2000, 0x1000 + text->length * 0x1000,
	//	&ptr, 0);
	orig_heap = rsrc_find_area (current->addr->heap_id);
	a->heap_id = area_create (a, orig_heap->length * 0x1000, 0x1000 +
		text->length * 0x1000, &ptr, 0);
	clone = area_clone (current->addr, a->heap_id, 0, &dst, 0);
	for (i = 0; i < orig_heap->length * 0x1000; i++)
		*((char *) dst + i) = *((char *) (orig_heap->virt_addr * 0x1000) + i);
	area_destroy (a, clone);

	strlcpy (t->name, current->name, sizeof (t->name));
	strlcat (t->name, "+", sizeof (t->name));

	rsrc_set_owner (&a->rsrc, t);
	rsrc_set_owner (&t->rsrc, t);
	return t->rsrc.id;
}

int thr_join (int thr_id, int options)
{
	current->sleeping_on = thr_id;
	current->flags = tSLEEP_THREAD;
	swtch ();
	return 0;
}

@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.070299
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/thread.c#3 $
d63 2
a64 2
	strlcpy (t->rsrc.name, current->rsrc.name, sizeof (t->rsrc.name));
	strlcat (t->rsrc.name, "+", sizeof (t->rsrc.name));
d73 4
a76 8
	task_t *task = rsrc_find_task(thr_id);
	
	if(task) {
		wait_on(task);
		return ERR_NONE;
	} else {
		return ERR_RESOURCE;
	}
@


1.1.1.3
log
@openblt.070799
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/thread.c#4 $
d76 1
a76 1
		wait_on((resource_t *)task);
@


