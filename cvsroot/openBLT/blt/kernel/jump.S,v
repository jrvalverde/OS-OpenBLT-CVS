head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.4
	openblt20000429:1.1.1.3
	openblt20000428:1.1.1.3
	openblt20000427:1.1.1.3
	openblt20000426:1.1.1.3
	openblt20000425:1.1.1.3
	openblt20000424:1.1.1.3
	openblt20000423:1.1.1.3
	openblt20000422:1.1.1.3
	openblt20000421:1.1.1.3
	openblt20000420:1.1.1.3
	openblt20000419:1.1.1.3
	openblt20000418:1.1.1.3
	openblt20000417:1.1.1.3
	openblt20000416:1.1.1.3
	openblt20000415:1.1.1.3
	openblt20000414:1.1.1.3
	openblt20000413:1.1.1.3
	openblt20000412:1.1.1.3
	openblt20000411:1.1.1.3
	openblt20000410:1.1.1.3
	openblt20000409:1.1.1.3
	openblt20000408:1.1.1.3
	openblt20000407:1.1.1.3
	openblt20000406:1.1.1.3
	openblt20000405:1.1.1.3
	openblt20000404:1.1.1.3
	openblt20000403:1.1.1.3
	openblt20000402:1.1.1.3
	openblt20000401:1.1.1.3
	openblt20000331:1.1.1.3
	openblt20000330:1.1.1.3
	openblt20000329:1.1.1.3
	openblt20000328:1.1.1.3
	openblt20000327:1.1.1.3
	openblt20000326:1.1.1.3
	openblt20000325:1.1.1.3
	openblt20000324:1.1.1.3
	openblt20000323:1.1.1.3
	openblt20000322:1.1.1.3
	openblt20000321:1.1.1.3
	openblt20000320:1.1.1.3
	openblt20000319:1.1.1.3
	openblt20000318:1.1.1.3
	openblt20000317:1.1.1.3
	openblt20000316:1.1.1.3
	openblt20000315:1.1.1.3
	openblt20000314:1.1.1.3
	openblt20000313:1.1.1.3
	openblt20000312:1.1.1.3
	openblt20000311:1.1.1.3
	openblt20000310:1.1.1.3
	openblt20000309:1.1.1.3
	openblt20000308:1.1.1.3
	openblt20000307:1.1.1.3
	openblt20000306:1.1.1.3
	openblt20000305:1.1.1.3
	openblt20000304:1.1.1.3
	openblt20000303:1.1.1.3
	openblt20000302:1.1.1.3
	openblt20000301:1.1.1.3
	openblt20000229:1.1.1.3
	openblt20000228:1.1.1.3
	openblt20000227:1.1.1.3
	openblt20000226:1.1.1.3
	openblt20000225:1.1.1.3
	openblt20000224:1.1.1.3
	openblt20000223:1.1.1.3
	openblt20000222:1.1.1.3
	openblt20000221:1.1.1.3
	openblt20000220:1.1.1.3
	openblt20000219:1.1.1.3
	openblt20000218:1.1.1.3
	openblt20000217:1.1.1.3
	openblt20000216:1.1.1.3
	openblt20000215:1.1.1.3
	openblt20000214:1.1.1.3
	openblt20000213:1.1.1.3
	openblt20000212:1.1.1.3
	openblt20000211:1.1.1.3
	openblt20000210:1.1.1.3
	openblt20000209:1.1.1.3
	openblt20000208:1.1.1.3
	openblt20000207:1.1.1.3
	openblt20000206:1.1.1.3
	openblt20000205:1.1.1.3
	openblt20000204:1.1.1.3
	openblt20000203:1.1.1.3
	openblt20000202:1.1.1.3
	openblt20000201:1.1.1.3
	openblt20000131:1.1.1.3
	openblt20000130:1.1.1.3
	openblt20000129:1.1.1.3
	openblt20000128:1.1.1.3
	openblt20000127:1.1.1.3
	openblt20000126:1.1.1.3
	openblt20000125:1.1.1.3
	openblt20000124:1.1.1.3
	openblt20000123:1.1.1.3
	openblt20000122:1.1.1.3
	openblt20000121:1.1.1.3
	openblt20000120:1.1.1.3
	openblt20000119:1.1.1.3
	openblt20000118:1.1.1.3
	openblt20000117:1.1.1.2
	openblt20000116:1.1.1.2
	openblt20000115:1.1.1.2
	openblt20000114:1.1.1.2
	openblt20000113:1.1.1.2
	openblt20000112:1.1.1.2
	openblt20000111:1.1.1.2
	openblt20000110:1.1.1.2
	openblt20000109:1.1.1.2
	openblt20000108:1.1.1.2
	openblt20000107:1.1.1.2
	openblt20000106:1.1.1.2
	openblt20000105:1.1.1.2
	openblt20000104:1.1.1.2
	openblt20000103:1.1.1.2
	openblt20000102:1.1.1.2
	openblt19991228:1.1.1.1
	openblt19990827:1.1.1.1
	openblt082699:1.1.1.1
	openblt082599:1.1.1.1
	openblt082499:1.1.1.1
	openblt082399:1.1.1.1
	openblt082299:1.1.1.1
	openblt082199:1.1.1.1
	openblt082099:1.1.1.1
	openblt081999:1.1.1.1
	openblt081899:1.1.1.1
	openblt081799:1.1.1.1
	openblt081699:1.1.1.1
	openblt081599:1.1.1.1
	openblt071199:1.1.1.1
	openblt071099:1.1.1.1
	openblt070799:1.1.1.1
	openblt070699:1.1.1.1
	openblt070299:1.1.1.1
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.32.17;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.36.51;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.17.11.18;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# $Id: //depot/blt/kernel/jump.S#4 $

#include "smp.h"

.text
.globl __syscall
.globl __null_irq
.globl __timer_irq
.globl __kbd_irq
.globl __ex0
.globl __ex1
.globl __ex2
.globl __ex3
.globl __ex4
.globl __ex5
.globl __ex6
.globl __ex7
.globl __ex8
.globl __ex9
.globl __ex10
.globl __ex11
.globl __ex12
.globl __ex13
.globl __ex14
.globl __ex15
.globl __ex16
.globl __ex17
.globl __ex18
.globl __irq1
.globl __irq2
.globl __irq3
.globl __irq4
.globl __irq5
.globl __irq6
.globl __irq7
.globl __irq8
.globl __irq9
.globl __irq10
.globl __irq11
.globl __irq12
.globl __irq13
.globl __irq14
.globl __irq15
.globl __ipi_cf
.globl __ipi_tlb
.globl __ipi_pte
.globl __ipi_resched
.globl __ipi_stop

__null_irq:
	movb $32, %al
	outb %al, $32
	iret

__syscall:
	pusha
	call syscall
	popa
	iret

__timer_irq:
	pusha
#ifdef __SMP__
	movb smp_configured, %al
	cmpb $1, %al
	je 1f
#endif
	movb $32, %al
	outb %al, $32
#ifdef __SMP__
	jmp 2f
1:
	call apic_eoi
#endif
2:
	call timer_irq
	popa
	iret

__ex0:
	pusha
	pushl $0
	jmp _fault0
__ex1:
	pusha
	pushl $1
	jmp _fault0
__ex2:
	pusha
	pushl $2
	jmp _fault0
__ex3:
	pusha
	pushl $3
	jmp _fault0
__ex4:
	pusha
	pushl $4
	jmp _fault0
__ex5:
	pusha
	pushl $5
	jmp _fault0
__ex6:
	pusha
	pushl $6
	jmp _fault0
__ex7:
	pusha
	pushl $7
	jmp _fault0
__ex8:
	pusha	
	pushl $8
	jmp _fault1
__ex9:
	pusha
	pushl $9
	jmp _fault0
__ex10:
	pusha
	pushl $10
	jmp _fault1
__ex11:
	pusha
	pushl $11
	jmp _fault1
__ex12:
	pusha
	pushl $12
	jmp _fault1
__ex13:
	pusha
	pushl $13
	jmp _fault1
__ex14:
	pusha
	pushl $14
	jmp _fault1
__ex15:
	pusha
	pushl $15
	jmp _fault0
__ex16:
	pusha
	pushl $16
	jmp _fault0
__ex17:
	pusha
	pushl $17
	jmp _fault0
__ex18:
	pusha
	pushl $18
	jmp _fault0

__irq1:	
	pushl $1
	jmp __irq
__irq2:	
	pushl $2
	jmp __irq
__irq3:	
	pushl $3
	jmp __irq
__irq4:	
	pushl $4
	jmp __irq
__irq5:	
	pushl $5
	jmp __irq
__irq6:	
	pushl $6
	jmp __irq
__irq7:	
	pushl $7
	jmp __irq
__irq8:	
	pushl $8
	jmp __irq
__irq9:	
	pushl $9
	jmp __irq	
__irq10:	
	pushl $10
	jmp __irq	
__irq11:	
	pushl $11
	jmp __irq	
__irq12:	
	pushl $12
	jmp __irq	
__irq13:	
	pushl $13
	jmp __irq	
__irq14:	
	pushl $14
	jmp __irq	
__irq15:	
	pushl $15
	jmp __irq
	
__irq:
	pusha

	call irq_dispatch
		
	movb $32, %al
	outb %al, $32
	
	popa
	add $4,%esp
	iret
			
_fault0:
	call fault
	add $4,%esp
	popa
	iret
_fault1:
	call faultE
	add $4,%esp
	popa
	add $4,%esp
	iret

# From: Jeff Bush <jeff@@be.com>

;#       1. Stores necessary registers on old stack
;#       2. Changes old stack pointer to reflect new offset
;#       3. Change address space if necessary
;#       4. Pops state off old stack
;#       5. returns to address on old stack, resuming thread


.globl          _context_switch
.globl			thread_bootstrap
.globl			kthread_bootstrap

_context_switch:
				pushf
                pushl   %ebp
                pushl   %esi
                pushl   %edi
				pushl	%ebx
                movl    24(%esp), %eax          # Where to save stack pointer
                movl    %esp, (%eax)            # Save old stack
                movl    32(%esp), %eax          # Get new PDBR
                movl    28(%esp), %ebx          # Get new stack loc

                cmpl    $0, %eax                # Need to change addr. space?
                je      changed_pdbr            # If parameter was zero, no
                movl    %eax, %cr3              # Change address space

changed_pdbr:   movl    %ebx, %esp              # switch to new stack
				popl	%ebx
                popl    %edi
                popl    %esi
                popl    %ebp
                popf
                ret
				
thread_bootstrap:
				iret

kthread_bootstrap:
				lret


#ifdef __SMP__

__ipi_cf:
	pushl $0x40
	jmp __ipi
__ipi_tlb:
	pushl $0x41
	jmp __ipi
__ipi_pte:
	pushl $0x42
	jmp __ipi
__ipi_resched:
	pushl $0x43
	jmp __ipi
__ipi_stop:
	pushl $0x44
	jmp __ipi

__ipi:
	pusha
	call ipi_dispatch
	call apic_eoi
	popa
	add $4, %esp
	iret

#endif

@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.20000102
@
text
@d1 1
a1 1
# $Id: //depot/blt/kernel/jump.S#5 $
d180 1
a180 1
	jmp __irqhi
d183 1
a183 1
	jmp __irqhi	
d186 1
a186 1
	jmp __irqhi	
d189 1
a189 1
	jmp __irqhi	
d192 1
a192 1
	jmp __irqhi	
d195 1
a195 1
	jmp __irqhi	
d198 1
a198 1
	jmp __irqhi	
d201 1
a201 1
	jmp __irqhi
d208 2
a209 17
	movb $0x20, %al
	outb %al, $0x20
	
	popa
	add $4,%esp
	iret

__irqhi:
	pusha

	call irq_dispatch
		
	movb $0x20, %al
	outb %al, $0xA0

	movb $0x20, %al
	outb %al, $0x20
@


1.1.1.3
log
@openblt.20000118
@
text
@d1 1
a1 5
/* $Id: //depot/blt/kernel/jump.S#6 $
**
** Copyright 1998 Brian Swetland.  All rights reserved.
** Distributed under the terms of the OpenBLT License.
*/
@


1.1.1.4
log
@openblt.20000517
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/jump.S#8 $
d14 34
a52 1
.globl ehfunctab
d84 161
a244 86
#define FAULT(n) \
.globl __ex##n ;\
__ex##n: ;\
	pusha ;\
	push $n ;\
	mov $(n * 4 + ehfunctab), %ebx ;\
	mov (%ebx), %ebx ;\
	call *%ebx ;\
	add $4,%esp ;\
	popa ;\
	iret

#define FAULTE(n) \
.globl __ex##n ;\
__ex##n: ;\
	pusha ;\
	push $n ;\
	mov $(n * 4 + ehfunctab), %ebx ;\
	mov (%ebx), %ebx ;\
	call *%ebx ;\
	add $4,%esp ;\
	popa ;\
	add $4,%esp ;\
	iret

FAULT(0)
FAULT(1)
FAULT(2)
FAULT(3)
FAULT(4)
FAULT(5)
FAULT(6)
FAULT(7)
FAULTE(8)
FAULT(9)
FAULTE(10)
FAULTE(11)
FAULTE(12)
FAULTE(13)
FAULTE(14)
FAULT(15)
FAULT(16)
FAULT(17)
FAULT(18)

#define IRQ(n) \
.globl __irq##n ;\
__irq##n: ;\
	push $n ;\
	pusha ;\
	call irq_dispatch ;\
	movb $0x20, %al ;\
	outb %al, $0x20 ;\
	popa ;\
	add $4,%esp ;\
	iret 

#define IRQHI(n) \
.globl __irq##n ;\
__irq##n: ;\
	push $n ;\
	pusha ;\
	call irq_dispatch ;\
	movb $0x20, %al ;\
	outb %al, $0xA0 ;\
	movb $0x20, %al ;\
	outb %al, $0x20 ;\
	popa ;\
	add $4,%esp ;\
	iret			

IRQ(1)
IRQ(2)
IRQ(3)
IRQ(4)
IRQ(5)
IRQ(6)
IRQ(7)
IRQHI(8)
IRQHI(9)
IRQHI(10)
IRQHI(11)
IRQHI(12)
IRQHI(13)
IRQHI(14)
IRQHI(15)
@


