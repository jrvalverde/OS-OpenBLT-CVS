head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.5
	openblt20000429:1.1.1.5
	openblt20000428:1.1.1.5
	openblt20000427:1.1.1.5
	openblt20000426:1.1.1.5
	openblt20000425:1.1.1.5
	openblt20000424:1.1.1.5
	openblt20000423:1.1.1.5
	openblt20000422:1.1.1.5
	openblt20000421:1.1.1.5
	openblt20000420:1.1.1.5
	openblt20000419:1.1.1.5
	openblt20000418:1.1.1.5
	openblt20000417:1.1.1.5
	openblt20000416:1.1.1.5
	openblt20000415:1.1.1.5
	openblt20000414:1.1.1.5
	openblt20000413:1.1.1.5
	openblt20000412:1.1.1.5
	openblt20000411:1.1.1.5
	openblt20000410:1.1.1.5
	openblt20000409:1.1.1.5
	openblt20000408:1.1.1.5
	openblt20000407:1.1.1.5
	openblt20000406:1.1.1.5
	openblt20000405:1.1.1.5
	openblt20000404:1.1.1.5
	openblt20000403:1.1.1.5
	openblt20000402:1.1.1.5
	openblt20000401:1.1.1.5
	openblt20000331:1.1.1.5
	openblt20000330:1.1.1.5
	openblt20000329:1.1.1.5
	openblt20000328:1.1.1.5
	openblt20000327:1.1.1.5
	openblt20000326:1.1.1.5
	openblt20000325:1.1.1.5
	openblt20000324:1.1.1.5
	openblt20000323:1.1.1.5
	openblt20000322:1.1.1.5
	openblt20000321:1.1.1.5
	openblt20000320:1.1.1.5
	openblt20000319:1.1.1.5
	openblt20000318:1.1.1.5
	openblt20000317:1.1.1.5
	openblt20000316:1.1.1.5
	openblt20000315:1.1.1.5
	openblt20000314:1.1.1.5
	openblt20000313:1.1.1.5
	openblt20000312:1.1.1.5
	openblt20000311:1.1.1.5
	openblt20000310:1.1.1.5
	openblt20000309:1.1.1.5
	openblt20000308:1.1.1.5
	openblt20000307:1.1.1.5
	openblt20000306:1.1.1.5
	openblt20000305:1.1.1.5
	openblt20000304:1.1.1.5
	openblt20000303:1.1.1.5
	openblt20000302:1.1.1.5
	openblt20000301:1.1.1.5
	openblt20000229:1.1.1.5
	openblt20000228:1.1.1.5
	openblt20000227:1.1.1.5
	openblt20000226:1.1.1.5
	openblt20000225:1.1.1.5
	openblt20000224:1.1.1.5
	openblt20000223:1.1.1.5
	openblt20000222:1.1.1.5
	openblt20000221:1.1.1.5
	openblt20000220:1.1.1.5
	openblt20000219:1.1.1.5
	openblt20000218:1.1.1.5
	openblt20000217:1.1.1.5
	openblt20000216:1.1.1.5
	openblt20000215:1.1.1.5
	openblt20000214:1.1.1.5
	openblt20000213:1.1.1.5
	openblt20000212:1.1.1.5
	openblt20000211:1.1.1.5
	openblt20000210:1.1.1.5
	openblt20000209:1.1.1.5
	openblt20000208:1.1.1.5
	openblt20000207:1.1.1.5
	openblt20000206:1.1.1.5
	openblt20000205:1.1.1.5
	openblt20000204:1.1.1.5
	openblt20000203:1.1.1.5
	openblt20000202:1.1.1.5
	openblt20000201:1.1.1.5
	openblt20000131:1.1.1.5
	openblt20000130:1.1.1.5
	openblt20000129:1.1.1.5
	openblt20000128:1.1.1.5
	openblt20000127:1.1.1.5
	openblt20000126:1.1.1.5
	openblt20000125:1.1.1.5
	openblt20000124:1.1.1.5
	openblt20000123:1.1.1.5
	openblt20000122:1.1.1.5
	openblt20000121:1.1.1.5
	openblt20000120:1.1.1.5
	openblt20000119:1.1.1.5
	openblt20000118:1.1.1.5
	openblt20000117:1.1.1.5
	openblt20000116:1.1.1.5
	openblt20000115:1.1.1.5
	openblt20000114:1.1.1.5
	openblt20000113:1.1.1.5
	openblt20000112:1.1.1.5
	openblt20000111:1.1.1.5
	openblt20000110:1.1.1.5
	openblt20000109:1.1.1.5
	openblt20000108:1.1.1.5
	openblt20000107:1.1.1.5
	openblt20000106:1.1.1.5
	openblt20000105:1.1.1.5
	openblt20000104:1.1.1.5
	openblt20000103:1.1.1.5
	openblt20000102:1.1.1.5
	openblt19991228:1.1.1.4
	openblt19990827:1.1.1.3
	openblt082699:1.1.1.3
	openblt082599:1.1.1.3
	openblt082499:1.1.1.3
	openblt082399:1.1.1.3
	openblt082299:1.1.1.3
	openblt082199:1.1.1.3
	openblt082099:1.1.1.3
	openblt081999:1.1.1.3
	openblt081899:1.1.1.3
	openblt081799:1.1.1.3
	openblt081699:1.1.1.3
	openblt081599:1.1.1.3
	openblt071199:1.1.1.3
	openblt071099:1.1.1.3
	openblt070799:1.1.1.3
	openblt070699:1.1.1.2
	openblt070299:1.1.1.2
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.20.16.28.58;	author jr;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.20.16.29.16;	author jr;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.20.16.31.57;	author jr;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.20.16.32.17;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* $Id: //depot/blt/kernel/resource.c#3 $
**
** Copyright 1998 Brian J. Swetland
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions, and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions, and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#include "kernel.h"
#include "memory.h"
#include "resource.h"

typedef struct _rtab {
    resource_t *resource;
    int next;
} rtab;

static resource_t null_resource;
	
static rtab *rmap;
static uint32 rmax = 0;
static uint32 rfree = 0;

resnode_t *resource_list = NULL;


void rsrc_init(void *map, int size)
{
    int i;

    null_resource.id = 0;
    null_resource.type = RSRC_NONE;
    null_resource.owner = NULL;
    null_resource.rights = NULL;
    
    rfree = 1;    
    rmax = size / sizeof(resource_t);
    rmap = (rtab *) map;
    for(i = 0; i < rmax; i++) {
        rmap[i].resource = &null_resource;
        rmap[i].next = i+1;        
    }
    rmap[rmax-1].next = 0;            
}

void *rsrc_find(int type, int id)
{    
    if((id < rmax) && (rmap[id].resource->type == type)) {
        return rmap[id].resource;
    } else {
        return NULL;    
    }
}

void rsrc_set_owner(resource_t *r, task_t *owner) 
{
    resnode_t *rn;
    
    if(r->owner){
            /* unchain it from the owner */
        for(rn = r->owner->resources; rn; rn=rn->next){
            if(rn->resource == r){
                if(rn->prev) {
                    rn->prev->next = rn->next;
                } else {
                    r->owner->resources = rn->next;
                }
                if(rn->next) {
                    rn->next->prev = rn->prev;
                }
                kfree16(rn);
                break;
            }
        }		
    }
    
    r->owner = owner;
    
    if(owner){
        rn = (resnode_t *) kmalloc16();
        rn->resource = r;
        rn->prev = NULL;
        rn->next = owner->resources;
        owner->resources = rn;	
    }
}


int rsrc_identify(uint32 id) 
{
    if((id >= rmax) || (rmap[id].resource->type == RSRC_NONE)) return 0;
    return rmap[id].resource->owner->rsrc.id; 
}


void rsrc_bind(resource_t *rsrc, rsrc_type type, task_t *owner)
{
    uint32 id;
    resnode_t *rn;
    
    if(rfree){
        id = rfree;
        rfree = rmap[rfree].next;
    } else {
        panic("resource exhaustion");
    }
    
    rmap[id].resource = rsrc;
    rsrc->id = id;
    rsrc->type = type;
    rsrc->owner = owner;
    rsrc->rights = NULL;
    
    if(owner){
        rn = (resnode_t *) kmalloc16();
        rn->resource = rsrc;
        rn->prev = NULL;
        rn->next = owner->resources;
        owner->resources = rn;	
    }
    rn = (resnode_t *) kmalloc16();
    rn->resource = rsrc;
    rn->prev = NULL;
    rn->next = resource_list;
    resource_list = rn;
}

void rsrc_release(resource_t *r)
{
    uint32 id = r->id;
    resnode_t *rn;
    
	/* unchain it from the global pool */
    for(rn = resource_list; rn; rn=rn->next){
        if(rn->resource == r){
            if(rn->prev) {
                rn->prev->next = rn->next;
            } else {
                resource_list = rn->next;
            }
            if(rn->next) {
                rn->next->prev = rn->prev;
            }
            kfree16(rn);
            break;
        }
    }
    
    if(r->owner){
            /* unchain it from the owner */
        for(rn = r->owner->resources; rn; rn=rn->next){
            if(rn->resource == r){
                if(rn->prev) {
                    rn->prev->next = rn->next;
                } else {
                    r->owner->resources = rn->next;
                }
                if(rn->next) {
                    rn->next->prev = rn->prev;
                }
                kfree16(rn);
                break;
            }
        }	
    }
    
    r->type = RSRC_NONE;
    r->id = 0;
    rmap[id].resource = &null_resource;
    rmap[id].next = rfree;
    rfree = id;
}


@


1.1.1.1
log
@openBLT source code
@
text
@@


1.1.1.2
log
@openblt.070299
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/resource.c#6 $
d90 1
a90 1
                kfree(resnode_t,rn);
d99 1
a99 1
        rn = (resnode_t *) kmalloc(resnode_t);
a113 7
int queue_create(const char *name)
{
	resource_t *rsrc = (resource_t*) kmalloc(resource_t);
	rsrc_bind(rsrc,RSRC_QUEUE,kernel);
	rsrc_set_name(rsrc,name);
	return rsrc->id;
}
d132 1
a132 6
	rsrc->name[0] = 0;
	rsrc->queue_head = NULL;
	rsrc->queue_tail = NULL;
	rsrc->queue_count = 0;
	rsrc->lock = 0;
	
d134 1
a134 1
        rn = (resnode_t *) kmalloc(resnode_t);
d140 1
a140 1
    rn = (resnode_t *) kmalloc(resnode_t);
d163 1
a163 1
            kfree(resnode_t,rn);
d180 1
a180 1
                kfree(resnode_t,rn);
a192 70
void rsrc_set_name(resource_t *r, const char *name)
{
	if(name){
		int i;
		for(i=0;*name && (i<31);i++){
			r->name[i] = *name;
			name++;
		}
		r->name[i] = 0;
	} else {
		r->name[0] = 0;
	}
}

void rsrc_enqueue_ordered(resource_t *rsrc, task_t *task, uint32 wake_time)
{
	task_t *t = rsrc->queue_head;
	task->wait_time = wake_time;
	task->flags = tWAITING;
	task->waiting_on = rsrc;
	rsrc->queue_count++;
	while(t){
		if(wake_time < t->wait_time){
			/* add before an item (possibly at head of list) */
			task->queue_prev = t->queue_prev;
			task->queue_next = t;
			if(task->queue_prev) {
				task->queue_prev->queue_next = task;
			} else {
				rsrc->queue_head = task;
			}
			t->queue_prev = task;
			return;
		}
		if(!t->queue_next){
			/* add after last item (tail of list) */
			task->queue_prev = t;
			task->queue_next = NULL;
			t->queue_next = task;
			rsrc->queue_tail = task;
			return;
		}
		t = t->queue_next;
	}
	
	/* add the only item */
	rsrc->queue_tail = task;
	rsrc->queue_head = task;
	task->queue_prev = NULL;
	task->queue_next = NULL;
}

void rsrc_enqueue(resource_t *rsrc, task_t *task)
{
	task->wait_time = 0;
	task->flags = tWAITING;
	if(rsrc->queue_tail){
		rsrc->queue_tail->queue_next = task;
		task->queue_prev = rsrc->queue_tail;
		task->queue_next = NULL;
		rsrc->queue_tail = task;
	} else {
		rsrc->queue_tail = task;
		rsrc->queue_head = task;
		task->queue_prev = NULL;
		task->queue_next = NULL;
	}
	rsrc->queue_count++;
	task->waiting_on = rsrc;
}
a193 34
task_t *rsrc_dequeue(resource_t *rsrc)
{
	task_t *task;
	task = rsrc->queue_head;
	if(task){
		rsrc->queue_head = task->queue_next;
		if(rsrc->queue_head){
			rsrc->queue_head->queue_prev = NULL;
		} else {
			rsrc->queue_tail = NULL;
		}
		rsrc->queue_count--;
		task->queue_next = NULL;
		task->queue_prev = NULL;
		task->waiting_on = NULL;
		task->flags = tREADY;
	}
	return task;
}

const char *rsrc_typename(resource_t *rsrc)
{
	switch(rsrc->type){
	case RSRC_NONE: return "none";
	case RSRC_TASK: return "task";
	case RSRC_ASPACE: return "address space";
	case RSRC_PORT: return "port";
	case RSRC_SEM: return "semaphore";
	case RSRC_RIGHT: return "right";
	case RSRC_AREA: return "area";
	case RSRC_QUEUE: return "queue";
	default: return "????";
	}
}
@


1.1.1.3
log
@openblt.070799
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/resource.c#7 $
d45 1
d56 1
a56 1
    rmax = size / sizeof(rtab);
a149 1
		if(owner->resources) owner->resources->prev = rn;
a155 1
	if(resource_list) resource_list->prev = rn;
a196 6
	
	/* wait all blocking objects */
	while(r->queue_head){
		task_t *t = rsrc_dequeue(r);
		task_wake(t,ERR_RESOURCE);
	}
d200 2
a201 2
	rmap[id].resource = &null_resource;
	rmap[id].next = rfree;
@


1.1.1.4
log
@openblt.19991228
@
text
@d1 1
a1 1
/* $Id: //depot/blt/kernel/resource.c#11 $
a27 1

a30 1
#include "team.h"
d43 1
a43 1
list_t resource_list;
a48 2
	list_init(&resource_list);
	
d52 1
a52 1
	list_init(&null_resource.rights);
d73 1
a73 1
void rsrc_set_owner(resource_t *r, team_t *owner) 
d75 29
a103 2
    if(r->owner) list_remove(&r->owner->resources, r);
	if(r->owner = owner) list_add_tail(&owner->resources, r);
d106 1
d113 1
a113 1
int queue_create(const char *name, team_t *team)
d116 1
a116 1
	rsrc_bind(rsrc,RSRC_QUEUE,team);
d121 1
a121 1
void rsrc_bind(resource_t *rsrc, rsrc_type type, team_t *owner)
d124 1
d137 1
d139 4
d144 14
a157 6
	list_init(&rsrc->queue);
	list_init(&rsrc->rights);
	
    if(owner) list_add_tail(&owner->resources, rsrc);
	
	list_add_tail(&resource_list, rsrc);
d163 2
a164 5
    task_t *t;
	
	/* unchain it from the owner */
    if(r->owner) list_remove(&r->owner->resources, r);
	
d166 14
a179 1
	list_remove(&resource_list, r);
d181 21
a201 2
	/* wake all blocking objects */
	while((t = list_detach_head(&r->queue))) {
d204 1
a204 1
	
d228 1
a228 2
/* XXX fixme*/
	list_attach_tail(&rsrc->queue, &task->node);
d231 31
a261 1
	task->waiting_on = rsrc;	
d268 12
a280 1
	list_attach_tail(&rsrc->queue,&task->node);
d285 2
a286 1
	task_t *task = (task_t *) list_detach_head(&rsrc->queue);
d288 9
a302 7
task_t *rsrc_queue_peek(resource_t *rsrc)
{
	if(rsrc->queue.next != (node_t*) &rsrc->queue) {
		return (task_t*) rsrc->queue.next->data;
	}
}

d308 1
a308 1
	case RSRC_ASPACE: return "aspace";
d310 1
a310 1
	case RSRC_SEM: return "sem";
a313 1
	case RSRC_TEAM: return "team";
d316 1
a316 1
}@


1.1.1.5
log
@openblt.20000102
@
text
@d1 26
a26 2
/* Copyright 1998-1999, Brian J. Swetland. All rights reserved.
** Distributed under the terms of the OpenBLT License
@


