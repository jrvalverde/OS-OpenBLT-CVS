head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.1
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2005.01.20.16.32.06;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.32.06;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <blt/Message.h>
#include <blt/Connection.h>

#include <blt/syscall.h>

#include <stdio.h>

#define PCI_STUB

#include <pci.h>
#include <string.h>
#include <stdlib.h>

using namespace BLT;

int pci_dump(PCI *pci)
{
	Message msg;
	pci_cfg cfg;
	int n;
	
	printf("bus  dev  func vndr devc cls  sub  ifc  irq  base[0]  size[0]  base[1]  size[1] \n");
	printf("---- ---- ---- ---- ---- ---- ---- ---- ---- -------- -------- -------- --------\n");
 
	for(n=0;pci->get_nth_cfg(n,&cfg) == 0;n++){		
		printf("%U %U %U %S %S %U %U %U ",
			   cfg.bus, cfg.dev, cfg.func,
			   cfg.vendor_id, cfg.device_id,
			   cfg.base_class, cfg.sub_class, cfg.interface);
		switch(cfg.header_type & 0x7f){
		case 0:
			printf("%U %x %x %x %x\n", cfg.irq,
				   cfg.base[0], cfg.size[0],
				   cfg.base[1], cfg.size[1]);
			break;
			
		case 1:
			printf(" (pci <-> pci bridge)\n");
			break;
			
		default:
			printf(" (unknown header type)\n");
		}
	}
}
	
void dump_rom(PCI *pci, int bus, int dev, int func)
{
	int i;
	uchar *rom = (uchar *) 0xf0000000;
	
	area_create(4096, 0, (void**) &rom, AREA_PHYSMAP);
	printf("device: %d / %d / %d\n",bus,dev,func);
	
	pci->write(bus,dev,func,0x30,0xf0000001,4);
	
	for(i=0;i<256;i+=16){
		printf("%S: %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X %X\n",
			   i, rom[i+0], rom[i+1], rom[i+2], rom[i+3],
			   rom[i+4], rom[i+5], rom[i+6], rom[i+7],
			   rom[i+8], rom[i+9], rom[i+10], rom[i+11],
			   rom[i+12], rom[i+13], rom[i+14], rom[i+15]);
	}
}

int main(int argc, char *argv[])
{
	PCI *pci = PCI::FindService();
	
	if(argc == 5){
		char *cmd = argv[1];
		int bus = atoi(argv[2]);
		int dev = atoi(argv[3]);
		int func = atoi(argv[4]);
		
		if(!strcmp(cmd,"rom")){
			dump_rom(pci,bus,dev,func);
		}
		
		return 0;	
	}
	
	if(!pci) {
		printf("sysinfo: cannot find pci service\n");
	} else {
		pci_dump(pci);
	}
	
	return 0;
}
@


1.1.1.1
log
@openblt.20000102
@
text
@@
