head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.1
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2005.01.20.16.31.50;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.31.50;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <blt/os.h>
#include <blt/syscall.h>
#include <blt/qsem.h>
#include <win/Window.h>
#include <win/Canvas.h>
#include <win/Event.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

const int kCellWidth = 10;

class DrawingArea : public Canvas {
public:
	DrawingArea();
	virtual void EventReceived(const Event*);
private:
	int fLastX;
	int fLastY;
	bool fButtonDown;
};

class PaletteArea : public Canvas {
public:
	PaletteArea(DrawingArea *draw);
	virtual void EventReceived(const Event*);
	virtual void Repaint(long left, long top, long right, long bottom);
private:
	DrawingArea *fDrawingArea;
	int fCurrentColor;
};

DrawingArea::DrawingArea()
	:	fButtonDown(false)
{
}

void DrawingArea::EventReceived(const Event *event)
{
	switch (event->what) {
	case EVT_MOUSE_DOWN:
		LockMouseFocus();
		fButtonDown = true;
		fLastX = event->x;
		fLastY = event->y;
		break;
		
	case EVT_MOUSE_UP:
		fButtonDown = false;
		break;
		
	case EVT_MOUSE_MOVED:
		if (fButtonDown) {
			printf("DrawLine(%d, %d, %d, %d)\n", fLastX, fLastY, event->x, event->y);
			DrawLine(fLastX, fLastY, event->x, event->y);
			fLastX = event->x;
			fLastY = event->y;
			GetWindow()->Flush();
		}		

		break;
	
	default:
		Canvas::EventReceived(event);
	
	}
}

PaletteArea::PaletteArea(DrawingArea *draw)
	:	fDrawingArea(draw)
{
}

void PaletteArea::EventReceived(const Event *event)
{
	switch (event->what) {
	case EVT_MOUSE_DOWN:
		printf("PaletteArea: EventReceived\n");
		fDrawingArea->SetPenColor(event->x / kCellWidth * 2);
		Invalidate(fCurrentColor * kCellWidth, 0, fCurrentColor * kCellWidth + kCellWidth, 10);
		fCurrentColor = event->x / kCellWidth;
		Invalidate(fCurrentColor * kCellWidth, 0, fCurrentColor * kCellWidth + kCellWidth, 10);
		break;
	
	default:
		Canvas::EventReceived(event);
	}
}

void PaletteArea::Repaint(long left, long top, long right, long bottom)
{
	int x = (left / kCellWidth) * kCellWidth;
	while (x < right) {
		SetPenColor(x / kCellWidth * 2);
		FillRect(x, top, x + kCellWidth, bottom);
		if (x / kCellWidth == fCurrentColor) {
			SetPenColor(0);
			DrawLine(x, top, x + kCellWidth, top);
			DrawLine(x, bottom, x + kCellWidth, bottom);
			DrawLine(x, top, x, bottom);
			DrawLine(x + kCellWidth, top, x + kCellWidth, bottom);
		}
		
		x += kCellWidth;
	}
}

int main()
{
	Window *win = new Window(50, 30, 270, 180);
	win->Lock();
	win->Show();
	Canvas *border = new Canvas;
	win->AddChild(border, 0, 0, 250, 150);
	border->SetBackgroundColor(10);
	DrawingArea *draw = new DrawingArea;
	PaletteArea *palette = new PaletteArea(draw);
	border->AddChild(draw, 2, 2, 218, 139);
	border->AddChild(palette, 2, 140, 218, 148);
	draw->SetBackgroundColor(250);
	win->Unlock();
	return 0;
}
@


1.1.1.1
log
@openblt.19991228
@
text
@@
