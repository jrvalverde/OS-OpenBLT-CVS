head	1.1;
branch	1.1.1;
access;
symbols
	openblt20000517:1.1.1.1
	openblt20000429:1.1.1.1
	openblt20000428:1.1.1.1
	openblt20000427:1.1.1.1
	openblt20000426:1.1.1.1
	openblt20000425:1.1.1.1
	openblt20000424:1.1.1.1
	openblt20000423:1.1.1.1
	openblt20000422:1.1.1.1
	openblt20000421:1.1.1.1
	openblt20000420:1.1.1.1
	openblt20000419:1.1.1.1
	openblt20000418:1.1.1.1
	openblt20000417:1.1.1.1
	openblt20000416:1.1.1.1
	openblt20000415:1.1.1.1
	openblt20000414:1.1.1.1
	openblt20000413:1.1.1.1
	openblt20000412:1.1.1.1
	openblt20000411:1.1.1.1
	openblt20000410:1.1.1.1
	openblt20000409:1.1.1.1
	openblt20000408:1.1.1.1
	openblt20000407:1.1.1.1
	openblt20000406:1.1.1.1
	openblt20000405:1.1.1.1
	openblt20000404:1.1.1.1
	openblt20000403:1.1.1.1
	openblt20000402:1.1.1.1
	openblt20000401:1.1.1.1
	openblt20000331:1.1.1.1
	openblt20000330:1.1.1.1
	openblt20000329:1.1.1.1
	openblt20000328:1.1.1.1
	openblt20000327:1.1.1.1
	openblt20000326:1.1.1.1
	openblt20000325:1.1.1.1
	openblt20000324:1.1.1.1
	openblt20000323:1.1.1.1
	openblt20000322:1.1.1.1
	openblt20000321:1.1.1.1
	openblt20000320:1.1.1.1
	openblt20000319:1.1.1.1
	openblt20000318:1.1.1.1
	openblt20000317:1.1.1.1
	openblt20000316:1.1.1.1
	openblt20000315:1.1.1.1
	openblt20000314:1.1.1.1
	openblt20000313:1.1.1.1
	openblt20000312:1.1.1.1
	openblt20000311:1.1.1.1
	openblt20000310:1.1.1.1
	openblt20000309:1.1.1.1
	openblt20000308:1.1.1.1
	openblt20000307:1.1.1.1
	openblt20000306:1.1.1.1
	openblt20000305:1.1.1.1
	openblt20000304:1.1.1.1
	openblt20000303:1.1.1.1
	openblt20000302:1.1.1.1
	openblt20000301:1.1.1.1
	openblt20000229:1.1.1.1
	openblt20000228:1.1.1.1
	openblt20000227:1.1.1.1
	openblt20000226:1.1.1.1
	openblt20000225:1.1.1.1
	openblt20000224:1.1.1.1
	openblt20000223:1.1.1.1
	openblt20000222:1.1.1.1
	openblt20000221:1.1.1.1
	openblt20000220:1.1.1.1
	openblt20000219:1.1.1.1
	openblt20000218:1.1.1.1
	openblt20000217:1.1.1.1
	openblt20000216:1.1.1.1
	openblt20000215:1.1.1.1
	openblt20000214:1.1.1.1
	openblt20000213:1.1.1.1
	openblt20000212:1.1.1.1
	openblt20000211:1.1.1.1
	openblt20000210:1.1.1.1
	openblt20000209:1.1.1.1
	openblt20000208:1.1.1.1
	openblt20000207:1.1.1.1
	openblt20000206:1.1.1.1
	openblt20000205:1.1.1.1
	openblt20000204:1.1.1.1
	openblt20000203:1.1.1.1
	openblt20000202:1.1.1.1
	openblt20000201:1.1.1.1
	openblt20000131:1.1.1.1
	openblt20000130:1.1.1.1
	openblt20000129:1.1.1.1
	openblt20000128:1.1.1.1
	openblt20000127:1.1.1.1
	openblt20000126:1.1.1.1
	openblt20000125:1.1.1.1
	openblt20000124:1.1.1.1
	openblt20000123:1.1.1.1
	openblt20000122:1.1.1.1
	openblt20000121:1.1.1.1
	openblt20000120:1.1.1.1
	openblt20000119:1.1.1.1
	openblt20000118:1.1.1.1
	openblt20000117:1.1.1.1
	openblt20000116:1.1.1.1
	openblt20000115:1.1.1.1
	openblt20000114:1.1.1.1
	openblt20000113:1.1.1.1
	openblt20000112:1.1.1.1
	openblt20000111:1.1.1.1
	openblt20000110:1.1.1.1
	openblt20000109:1.1.1.1
	openblt20000108:1.1.1.1
	openblt20000107:1.1.1.1
	openblt20000106:1.1.1.1
	openblt20000105:1.1.1.1
	openblt20000104:1.1.1.1
	openblt20000103:1.1.1.1
	openblt20000102:1.1.1.1
	openblt19991228:1.1.1.1
	openblt19990827:1.1.1.1
	openblt082699:1.1.1.1
	openblt082599:1.1.1.1
	openblt082499:1.1.1.1
	openblt082399:1.1.1.1
	openblt082299:1.1.1.1
	openblt082199:1.1.1.1
	openblt082099:1.1.1.1
	openblt081999:1.1.1.1
	openblt081899:1.1.1.1
	openblt081799:1.1.1.1
	openblt081699:1.1.1.1
	openblt081599:1.1.1.1
	openblt071199:1.1.1.1
	openblt071099:1.1.1.1
	openblt070799:1.1.1.1
	openblt070699:1.1.1.1
	openblt070299:1.1.1.1
	openblt070199:1.1.1.1
	openblt063099:1.1.1.1
	openblt062999:1.1.1.1
	start:1.1.1.1
	openBLT:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.20.16.23.01;	author jr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*	$OpenBSD: pio.h,v 1.5 1997/11/10 23:40:45 niklas Exp $	*/
/*	$NetBSD: pio.h,v 1.13 1996/03/08 20:15:23 cgd Exp $	*/

/*
 * Copyright (c) 1993, 1995 Charles M. Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _I386_PIO_H_
#define _I386_PIO_H_

/*
 * Functions to provide access to i386 programmed I/O instructions.
 *
 * The in[bwl]() and out[bwl]() functions are split into two varieties: one to
 * use a small, constant, 8-bit port number, and another to use a large or
 * variable port number.  The former can be compiled as a smaller instruction.
 */

#include "blt/types.h"

#define __SLOW_DOWN_IO asm volatile ("jmp 1f \n 1: jmp 1f \n 1:")
#define SLOW_DOWN_IO __SLOW_DOWN_IO

#define outb_p(a,b)  { outb(a,b) ; SLOW_DOWN_IO; }
#define inb_p(a,b)   { inb(a,b)  ; SLOW_DOWN_IO; }
#define outw_p(a,b)  { outw(a,b) ; SLOW_DOWN_IO; }
#define inw_p(a,b)   { inw(a,b)  ; SLOW_DOWN_IO; }

#ifdef __OPTIMIZE__

#define	__use_immediate_port(port) \
	(__builtin_constant_p((port)) && (port) < 0x100)

#else

#define	__use_immediate_port(port)	0

#endif


#define	inb(port) \
	(__use_immediate_port(port) ? __inbc(port) : __inb(port))

static inline uint8
__inbc(int port)
{
	uint8 data;
	__asm __volatile("inb %1,%0" : "=a" (data) : "id" (port));
	return data;
}

static inline uint8
__inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static inline void
insb(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsb"			:
								:
			 "d" (port), "D" (addr), "c" (cnt)	:
			 "%edi", "%ecx", "memory");
}

#define	inw(port) \
	(__use_immediate_port(port) ? __inwc(port) : __inw(port))

static inline uint16
__inwc(int port)
{
	uint16 data;
	__asm __volatile("inw %1,%0" : "=a" (data) : "id" (port));
	return data;
}

static inline uint16
__inw(int port)
{
	uint16 data;
	__asm __volatile("inw %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static inline void
insw(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsw"			:
								:
			 "d" (port), "D" (addr), "c" (cnt)	:
			 "%edi", "%ecx", "memory");
}

#define	inl(port) \
	(__use_immediate_port(port) ? __inlc(port) : __inl(port))

static inline uint32
__inlc(int port)
{
	uint32 data;
	__asm __volatile("inl %1,%0" : "=a" (data) : "id" (port));
	return data;
}

static inline uint32
__inl(int port)
{
	uint32 data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
	return data;
}

static inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
								:
			 "d" (port), "D" (addr), "c" (cnt)	:
			 "%edi", "%ecx", "memory");
}

#define	outb(port, data) \
	(__use_immediate_port(port) ? __outbc(port, data) : __outb(port, data))

static inline void
__outbc(int port, uint8 data)
{
	__asm __volatile("outb %0,%1" : : "a" (data), "id" (port));
}

static inline void
__outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
}

static inline void
outsb(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsb"		:
								:
			 "d" (port), "S" (addr), "c" (cnt)	:
			 "%esi", "%ecx");
}

#define	outw(port, data) \
	(__use_immediate_port(port) ? __outwc(port, data) : __outw(port, data))

static inline void
__outwc(int port, uint16 data)
{
	__asm __volatile("outw %0,%1" : : "a" (data), "id" (port));
}

static inline void
__outw(int port, uint16 data)
{
	__asm __volatile("outw %0,%w1" : : "a" (data), "d" (port));
}

static inline void
outsw(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsw"		:
								:
			 "d" (port), "S" (addr), "c" (cnt)	:
			 "%esi", "%ecx");
}

#define	outl(port, data) \
	(__use_immediate_port(port) ? __outlc(port, data) : __outl(port, data))

static inline void
__outlc(int port, uint32 data)
{
	__asm __volatile("outl %0,%1" : : "a" (data), "id" (port));
}

static inline void
__outl(int port, uint32 data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
}

static inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
								:
			 "d" (port), "S" (addr), "c" (cnt)	:
			 "%esi", "%ecx");
}

#endif /* _I386_PIO_H_ */
@


1.1.1.1
log
@openBLT source code
@
text
@@
